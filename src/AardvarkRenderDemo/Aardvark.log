 0: initializing aardvark ........................................................................
 0:   System Information:
 0:     System:      Darwin 19.4.0 Darwin Kernel Version 19.4.0: Wed Mar  4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64
 0:     Processor:   12 core x64
 0:     Process:     x64
 0:     Framework:   .NET Core 3.1.4
 0:   Loading native dependencies for Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 
 0:     found: linux/AMD64/libglfw.so.3
 0:     found: mac/AMD64/libglfw.3.dylib
 0:     copy libglfw.3.dylib to /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Application.Slim.GL-32f42d4c-4cb0-88cf-a5d3-8c852c69d925-64/libglfw.3.dylib
 0:     found: windows/AMD64/glfw3.dll
 0:     found: windows/x86/glfw3.dll
 0:   Loading native dependencies for Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 0.015 s
 0:   Loading native dependencies for Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 
 0:     found: linux/AMD64/glvm.so
 0:     found: mac/AMD64/glvm.dylib
 0:     copy glvm.dylib to /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.GL-96423937-34fa-5842-8198-d81081aad7a9-64/glvm.dylib
 0:     found: windows/AMD64/glvm.dll
 0:     found: windows/AMD64/glvm.exp
 0:     found: windows/AMD64/glvm.iobj
 0:     found: windows/AMD64/glvm.ipdb
 0:     found: windows/AMD64/glvm.lib
 0:     found: windows/AMD64/glvm.pdb
 0:     found: windows/x86/glvm.dll
 0:     found: windows/x86/glvm.exp
 0:     found: windows/x86/glvm.iobj
 0:     found: windows/x86/glvm.ipdb
 0:     found: windows/x86/glvm.lib
 0:     found: windows/x86/glvm.pdb
 0:   Loading native dependencies for Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 0.000 s
 0:   Loading native dependencies for Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 
 0:     found: remap.xml
 0:     found: linux/AMD64/libturbojpeg.so
 0:     found: mac/AMD64/libturbojpeg.dylib
 0:     copy libturbojpeg.dylib to /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Service-6c07790d-9ae8-a533-bcc3-f89762a0781f-64/libturbojpeg.dylib
 0:     found: windows/AMD64/turbojpeg.dll
 0:     found: windows/x86/turbojpeg.dll
 0:   Loading native dependencies for Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 0.019 s
 0:   Loading plugins ............................................................................
 0:     [LoadPlugins] Using plugin cache file name: /Users/atti/.config/Aardvark/cache/AardvarkRenderDemo_plugins.bin
 0:     [ReadCacheFile] loaded cache file: /Users/atti/.config/Aardvark/cache/AardvarkRenderDemo_plugins.bin
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FSharp.Data.Adaptive.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Microsoft.DotNet.PlatformAbstractions.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.UI.Primitives.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Suave.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Ultz.SuperInvoke.Loader.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Ultz.SuperInvoke.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FShade.Core.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Rendering.Vulkan.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Rendering.GL.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Application.Slim.GL.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardium.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FsPickler.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Microsoft.Extensions.DependencyModel.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FShade.Imperative.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/System.Text.Json.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Silk.NET.Core.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Silk.NET.GLFW.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/AssimpNet.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.TypeProviders.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.GPGPU.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Adaptify.Core.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Application.Slim.Vulkan.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.SceneGraph.IO.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.UI.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Newtonsoft.Json.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/GLSLangSharp.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Service.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/DevILSharp.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FsPickler.Json.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.FSharp.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Application.Slim.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.Rendering.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.Telemetry.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FShade.SpirV.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/System.Collections.Immutable.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FSharp.Core.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Application.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.Runtime.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/FShade.GLSL.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.SceneGraph.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.Essentials.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/System.Reactive.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/OpenTK.dll
 0:     [GetPluginAssemblyPaths] retrying to load because not in cache /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/AardvarkRenderDemo.dll
 0:     [GetPluginAssemblyPaths] cache found for: /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1/Aardvark.Base.Incremental.dll
 0:   Loading plugins .................................................................... 0.037 s
 0:   using cache dir: /Users/atti/.config/Aardvark\cache
 0:   Loading native dependencies for DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null 
 0:     found: remap.xml
 0:     found: mac/AMD64/libDevIL.dylib
 0:     copy libDevIL.dylib to /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64/libDevIL.dylib
 0:     found: mac/AMD64/libILU.dylib
 0:     copy libILU.dylib to /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64/libILU.dylib
 0:     found: mac/AMD64/libILUT.dylib
 0:     copy libILUT.dylib to /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64/libILUT.dylib
 0:     found: windows/AMD64/DevIL.dll
 0:     found: windows/AMD64/ILU.dll
 0:     found: windows/AMD64/ILUT.dll
 0:     found: windows/x86/DevIL.dll
 0:     found: windows/x86/ILU.dll
 0:     found: windows/x86/ILUT.dll
 0:   Loading native dependencies for DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null 0.000 s
 0:   Loading native dependencies for Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 
 0:     found: remap.xml
 0:     found: linux/AMD64/libvkvm.so
 0:     found: windows/AMD64/vkvm.dll
 0:     found: windows/AMD64/vkvm.exp
 0:     found: windows/AMD64/vkvm.lib
 0:     found: windows/AMD64/vkvm.pdb
 0:     found: windows/x86/vkvm.dll
 0:     found: windows/x86/vkvm.exp
 0:     found: windows/x86/vkvm.lib
 0:     found: windows/x86/vkvm.pdb
 0:   Loading native dependencies for Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null 0.000 s
 0:   Loading native dependencies for GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null 
 0:     found: linux/AMD64/libGLSLangNative.so
 0:     found: windows/AMD64/GLSLangNative.dll
 0:     found: windows/AMD64/GLSLangNative.exp
 0:     found: windows/AMD64/GLSLangNative.iobj
 0:     found: windows/AMD64/GLSLangNative.ipdb
 0:     found: windows/AMD64/GLSLangNative.lib
 0:     found: windows/AMD64/GLSLangNative.pdb
 0:   Loading native dependencies for GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null 0.000 s
 0:   Loading native dependencies for AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null 
 0:     found: linux/AMD64/libassimp.so
 0:     found: mac/AMD64/libassimp.dylib
 0:     copy libassimp.dylib to /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/AssimpNet-969d1624-35de-e8ae-f27b-d0ea28a223a6-64/libassimp.dylib
 0:     found: windows/AMD64/Assimp64.dll
 0:     found: windows/x86/Assimp32.dll
 0:   Loading native dependencies for AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null 0.000 s
 0:   [cache miss] AardvarkRenderDemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Adaptify.Core, Version=0.0.46.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
 0:   [cache hit ] FSharp.Data.Adaptive, Version=0.0.25.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] FSharp.Core, Version=4.6.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
 0:   [cache hit ] Aardvark.Base, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   initializing PixImageDevil .................................................................
 0:     probing paths for DevIL
 0:       /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 0:       /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64
 0:     [Introspection] loaded native library DevIL from /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64/libDevIL.dylib
 0:   initializing PixImageDevil ......................................................... 0.029 s
 0:   [cache hit ] DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Base.Telemetry, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Base.Rendering, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] FShade.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] FShade.Imperative, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Base.FSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   initializing CustomPicklerProvider .........................................................
 0:     [cache miss] AardvarkRenderDemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Adaptify.Core, Version=0.0.46.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
 0:     [cache hit ] FSharp.Data.Adaptive, Version=0.0.25.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FSharp.Core, Version=4.6.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
 0:     [cache hit ] Aardvark.Base, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Telemetry, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Rendering, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Imperative, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.FSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.TypeProviders, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.GLSL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Incremental, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Essentials, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.SceneGraph, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
 0:     [cache hit ] Aardvark.Application, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Suave, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.GPGPU, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler.Json, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.GLFW, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke.Loader, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.Core, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardium, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     installing pickler: Aardvark.Base.Picklers.AdaptivePicklers
 0:   initializing CustomPicklerProvider ................................................. 0.031 s
 0:   [cache hit ] FsPickler, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Base.TypeProviders, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] FShade.GLSL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Base.Incremental, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Base.Essentials, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.UI, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.SceneGraph, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   initializing SceneGraphCompletenessCheck ...................................................
 0:     [cache miss] AardvarkRenderDemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Adaptify.Core, Version=0.0.46.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
 0:     [cache hit ] FSharp.Data.Adaptive, Version=0.0.25.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FSharp.Core, Version=4.6.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
 0:     [cache hit ] Aardvark.Base, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Telemetry, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Rendering, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Imperative, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.FSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.TypeProviders, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.GLSL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Incremental, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Essentials, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.SceneGraph, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache miss] AardvarkRenderDemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Adaptify.Core, Version=0.0.46.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
 0:     [cache hit ] FSharp.Data.Adaptive, Version=0.0.25.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FSharp.Core, Version=4.6.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
 0:     [cache hit ] Aardvark.Base, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Telemetry, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Rendering, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Imperative, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.FSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.TypeProviders, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.GLSL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Incremental, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Essentials, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.SceneGraph, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
 0:     [cache hit ] Aardvark.Application, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Suave, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.GPGPU, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler.Json, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.GLFW, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke.Loader, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.Core, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardium, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AardvarkRenderDemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Adaptify.Core, Version=0.0.46.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
 0:     [cache hit ] FSharp.Data.Adaptive, Version=0.0.25.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FSharp.Core, Version=4.6.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
 0:     [cache hit ] Aardvark.Base, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Telemetry, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Rendering, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Imperative, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.FSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.TypeProviders, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.GLSL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Incremental, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Essentials, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.SceneGraph, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
 0:     [cache hit ] Aardvark.Application, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Suave, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.GPGPU, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler.Json, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.GLFW, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke.Loader, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.Core, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardium, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
 0:     [cache hit ] Aardvark.Application, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Suave, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.GPGPU, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler.Json, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.GLFW, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke.Loader, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.Core, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardium, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AardvarkRenderDemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Adaptify.Core, Version=0.0.46.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
 0:     [cache hit ] FSharp.Data.Adaptive, Version=0.0.25.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FSharp.Core, Version=4.6.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
 0:     [cache hit ] Aardvark.Base, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Telemetry, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Rendering, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Imperative, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.FSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.TypeProviders, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.GLSL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Incremental, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Essentials, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.SceneGraph, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
 0:     [cache hit ] Aardvark.Application, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Suave, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.GPGPU, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler.Json, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.GLFW, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke.Loader, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.Core, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardium, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AardvarkRenderDemo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Adaptify.Core, Version=0.0.46.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
 0:     [cache hit ] FSharp.Data.Adaptive, Version=0.0.25.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FSharp.Core, Version=4.6.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
 0:     [cache hit ] Aardvark.Base, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] DevILSharp, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Telemetry, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Rendering, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.Imperative, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.FSharp, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.TypeProviders, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FShade.GLSL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Incremental, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Essentials, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.SceneGraph, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
 0:     [cache hit ] Aardvark.Application, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Suave, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.GPGPU, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Base.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] FsPickler.Json, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.UI.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.GLFW, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Ultz.SuperInvoke.Loader, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Silk.NET.Core, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null
 0:     [cache hit ] Aardium, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   initializing SceneGraphCompletenessCheck ........................................... 0.085 s
 0:   [cache hit ] Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
 0:   [cache hit ] Aardvark.Application, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Service, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Suave, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Rendering.Vulkan, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] GLSLangSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.GPGPU, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Rendering.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Base.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] FsPickler.Json, Version=5.2.2.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.UI.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] AssimpNet, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.Application.Slim.GL, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Silk.NET.GLFW, Version=1.0.1.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Ultz.SuperInvoke, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Ultz.SuperInvoke.Loader, Version=1.0.4.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Silk.NET.Core, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardium, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   [cache hit ] Aardvark.SceneGraph.IO, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
 0:   initializing Loader ................................................................ 0.000 s
 0: initializing aardvark ................................................................ 0.389 s
 0: probing paths for nvapi64
 0:   /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Application.Slim.GL-32f42d4c-4cb0-88cf-a5d3-8c852c69d925-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.GL-96423937-34fa-5842-8198-d81081aad7a9-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Service-6c07790d-9ae8-a533-bcc3-f89762a0781f-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.Vulkan-bb94696d-9eea-074c-ddff-a32358cb7e99-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/GLSLangSharp-fb08be3f-76ef-01e5-86cb-7c1c69b76b7e-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/AssimpNet-969d1624-35de-e8ae-f27b-d0ea28a223a6-64
 0: [Introspection] could not load native library nvapi64.dll
 0: trying to resolve native library libEGL.dll
 0: probing paths for libEGL
 0:   /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Application.Slim.GL-32f42d4c-4cb0-88cf-a5d3-8c852c69d925-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.GL-96423937-34fa-5842-8198-d81081aad7a9-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Service-6c07790d-9ae8-a533-bcc3-f89762a0781f-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.Vulkan-bb94696d-9eea-074c-ddff-a32358cb7e99-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/GLSLangSharp-fb08be3f-76ef-01e5-86cb-7c1c69b76b7e-64
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/AssimpNet-969d1624-35de-e8ae-f27b-d0ea28a223a6-64
 0: [Introspection] could not load native library libEGL.dll
 0: WARNING: OpenGL 4.5 not working
 0: WARNING: OpenGL 4.3 not working
 0: OpenGL 4.1 working
 0: backbuffer
 0:   color: R8G8B8A8
 0:   depth: D24S0
 0: probing paths for glvm
 0:   /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.GL-96423937-34fa-5842-8198-d81081aad7a9-64
 0: [Introspection] loaded native library glvm from /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.GL-96423937-34fa-5842-8198-d81081aad7a9-64/glvm.dylib
 0: backbuffer
 0:   color: R8G8B8A8
 0:   depth: D24S0
 0: initializing OpenGL runtime ..................................................................
 0:   probing paths for glvm
 0:     /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 0:     /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Application.Slim.GL-32f42d4c-4cb0-88cf-a5d3-8c852c69d925-64
 0:     /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.GL-96423937-34fa-5842-8198-d81081aad7a9-64
 0:     /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Service-6c07790d-9ae8-a533-bcc3-f89762a0781f-64
 0:     /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64
 0:     /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.Vulkan-bb94696d-9eea-074c-ddff-a32358cb7e99-64
 0:     /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/GLSLangSharp-fb08be3f-76ef-01e5-86cb-7c1c69b76b7e-64
 0:     /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/AssimpNet-969d1624-35de-e8ae-f27b-d0ea28a223a6-64
 0:   [Introspection] loaded native library glvm from /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Rendering.GL-96423937-34fa-5842-8198-d81081aad7a9-64/glvm.dylib
 0:   vendor:   "ATI Technologies Inc."
 0:   renderer: "AMD Radeon Pro 5300M OpenGL Engine"
 0:   version:  OpenGL 4.1 / GLSL 4.1
 0: initializing OpenGL runtime .......................................................... 0.097 s
 0: WARNING: load
 0: probing paths for dl
 0:   /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 0:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/AssimpNet-969d1624-35de-e8ae-f27b-d0ea28a223a6-64
 0: [Introspection] loaded native library dl from dl.dylib
 0: Aardvark.UI serves template.html
 0: Aardvark.UI serves favicon.ico
 0: Aardvark.Service serves aardvark.js
 0: Aardvark.Service serves rgbcolor.js
 0: Aardvark.Service serves docking.js
 0: Aardvark.Service serves semantic.js
 0: Aardvark.Service serves jquery-3-3-1.js
 0: Aardvark.Service serves touchstick.js
 0: Aardvark.Service serves aardfs.js
 0: Aardvark.Service serves essentialstuff.js
 0: Aardvark.Service serves aardvark.css
 0: Aardvark.Service serves docking.css
 0: Aardvark.Service serves semantic.css
 0: Aardvark.Service serves aardfs.css
 0: Aardvark.Service serves semantic-overrides.css
 0: Aardvark.Service serves fonts.css
 0: Aardvark.Service serves index.html
 0: Aardvark.Service serves stats.html
 0: Aardvark.Service serves aardvark-light.svg
 0: Aardvark.Service serves aardvark.svg
 0: Aardvark.Service serves brand-icons.woff2
 0: Aardvark.Service serves outline-icons.woff2
 0: Aardvark.Service serves icons.woff2
 0: Aardvark.Service serves S6u8w4BMUTPHjxsAUi-qJCY.woff2
 0: Aardvark.Service serves S6u8w4BMUTPHjxsAXC-q.woff2
 0: Aardvark.Service serves S6u9w4BMUTPHh6UVSwaPGR_p.woff2
 0: Aardvark.Service serves S6u9w4BMUTPHh6UVSwiPGQ.woff2
 0: Aardvark.Service serves S6uyw4BMUTPHjx4wXg.woff2
 0: Aardvark.Service serves S6uyw4BMUTPHjxAwXjeu.woff2
 0: Aardvark.Service serves S6u_w4BMUTPHjxsI5wq_FQft1dw.woff2
 0: Aardvark.Service serves S6u_w4BMUTPHjxsI5wq_Gwft.woff2
 0: Aardvark.UI serves template.html
 0: Aardvark.UI serves favicon.ico
 0: Aardvark.UI.Primitives serves spectrum.css
 0: Aardvark.UI.Primitives serves spectrum.js
 1: [Server] created client for (0ab33ade-c2b5-e099-db7c-78eff19d14fe/n7), mapping enabled
 1: [Client] 1: running n7
 2: [Scene] n7: created
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform Global
 9: {
10:     float Expousure;
11: };
12: 
13: 
14: uniform sampler2D diffuseSampler;
15: 
16: 
17: #ifdef Vertex
18: layout(location = 0) in vec2 DiffuseColorCoordinates;
19: layout(location = 1) in vec4 Positions;
20: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
21: void main()
22: {
23:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
24:     gl_Position = Positions;
25: }
26: 
27: #endif
28: 
29: 
30: 
31: #ifdef Fragment
32: 
33: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
34: layout(location = 0) out vec4 ColorsOut;
35: void main()
36: {
37:     ColorsOut = vec4(pow((vec3(1.0, 1.0, 1.0) - exp(((-texture(diffuseSampler, fs_DiffuseColorCoordinates).xyz) * Expousure))), vec3(0.45454545454545453, 0.45454545454545453, 0.45454545454545453)), 1.0);
38: }
39: 
40: #endif

 2: texture created
 2: result created
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: struct tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d
  8: {
  9:     bool Item0;
 10:     vec3 Item1;
 11:     vec3 Item2;
 12: };
 13: 
 14: struct SLEAardvarkRenderDemo_SLEUniform_Light
 15: {
 16:     int lightType;
 17:     vec4 lightPosition;
 18:     vec3 color;
 19:     float attenuationQad;
 20:     float attenuationLinear;
 21:     bool castsShadow;
 22: };
 23: 
 24: layout(std140)
 25: uniform PerView
 26: {
 27:     vec3 CameraLocation;
 28: };
 29: 
 30: 
 31: layout(std140)
 32: uniform Global
 33: {
 34:     SLEAardvarkRenderDemo_SLEUniform_Light Light;
 35:     mat4x4 LightViewMatrix;
 36: };
 37: 
 38: 
 39: uniform sampler2D color;
 40: 
 41: uniform sampler2D materialProperties;
 42: 
 43: uniform sampler2D normal;
 44: 
 45: uniform sampler2DShadow samplerShadowMap;
 46: 
 47: uniform sampler2D wPos;
 48: 
 49: float helper(float roughness)
 50: {
 51:     float r = (roughness + 1.0);
 52:     return ((r * r) / 8.0);
 53: }
 54: 
 55: 
 56: tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(bool item0, vec3 item1, vec3 item2)
 57: {
 58:     tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d res;
 59:     res.Item0 = item0;
 60:     res.Item1 = item1;
 61:     res.Item2 = item2;
 62:     return res;
 63: }
 64: 
 65: 
 66: vec3 SLEAardvarkRenderDemo_PBR_fresnelSchlick_p2rPA4e4MFUMqGJ0C14Tng(vec3 f0, float cosTheta)
 67: {
 68:     return (f0 + ((1.0 - f0) * pow((1.0 - cosTheta), 5.0)));
 69: }
 70: 
 71: 
 72: float SLEAardvarkRenderDemo_PBR_DistributionGGX_9rKdY223uBS_NUz8TxOtw(vec3 n, vec3 h, float roughness)
 73: {
 74:     float a = (roughness * roughness);
 75:     float a2 = (a * a);
 76:     float nDotH = max(0.0, dot(n, h));
 77:     float deno = (((nDotH * nDotH) * (a2 - 1.0)) + 1.0);
 78:     return (a2 / ((3.141592653589793 * deno) * deno));
 79: }
 80: 
 81: 
 82: float SLEAardvarkRenderDemo_PBR_random_JRWM00pdSXu6ly00qNw9NdQg(vec3 seed, int i)
 83: {
 84:     return fract((sin(dot(vec4(seed, float(i)), vec4(12.9898, 78.233, 45.164, 94.673))) * 43758.5453));
 85: }
 86: 
 87: 
 88: float SLEAardvarkRenderDemo_PBR_poissonSamplingStrat_EpA9Eym8CExypNnxV00GUdw(sampler2DShadow shadowMap, vec4 samplePos, vec4 pos, float comp)
 89: {
 90:     vec2 arr[16];
 91:     arr[0] = vec2(-0.94201624, -0.39906216);
 92:     arr[1] = vec2(0.94558609, -0.76890725);
 93:     arr[2] = vec2(-0.094184101, -0.9293887);
 94:     arr[3] = vec2(0.34495938, 0.2938776);
 95:     arr[4] = vec2(-0.91588581, 0.45771432);
 96:     arr[5] = vec2(-0.81544232, -0.87912464);
 97:     arr[6] = vec2(-0.38277543, 0.27676845);
 98:     arr[7] = vec2(0.97484398, 0.75648379);
 99:     arr[8] = vec2(0.44323325, -0.97511554);
100:     arr[9] = vec2(0.53742981, -0.4737342);
101:     arr[10] = vec2(-0.26496911, -0.41893023);
102:     arr[11] = vec2(0.79197514, 0.19090188);
103:     arr[12] = vec2(-0.2418884, 0.99706507);
104:     arr[13] = vec2(-0.81409955, 0.9143759);
105:     arr[14] = vec2(0.19984126, 0.78641367);
106:     arr[15] = vec2(0.14383161, -0.1410079);
107:     float vis = 0.0;
108:     for(int i = 0; (i < 8); i++)
109:     {
110:         vis = (vis + (texture(shadowMap, vec3((samplePos.xy + (arr[(int((16.0 * SLEAardvarkRenderDemo_PBR_random_JRWM00pdSXu6ly00qNw9NdQg(pos.xyz, i))) % 16)] / 600.0)), comp)) / 8.0));
111:     }
112:     return vis;
113: }
114: 
115: 
116: tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d SLEAardvarkRenderDemo_PBR_getLightParams_kyLcjVsSKKfWCNmsxKXq1A(SLEAardvarkRenderDemo_SLEUniform_Light light, vec3 wPos)
117: {
118:     if((light.lightType == 0))
119:     {
120:         return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
121:     }
122:     else
123:     {
124:         if((light.lightType == 1))
125:         {
126:             return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(true, normalize((-light.lightPosition.xyz)), light.color);
127:         }
128:         else
129:         {
130:             if((light.lightType == 2))
131:             {
132:                 float dist = distance(light.lightPosition.xyz, wPos);
133:                 return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(true, normalize((light.lightPosition.xyz - wPos)), (light.color * (1.0 / ((1.0 + (light.attenuationLinear * dist)) + ((light.attenuationQad * dist) * dist)))));
134:             }
135:             else
136:             {
137:                 return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
138:             }
139:         }
140:     }
141: }
142: 
143: 
144: float SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(bool ilb, float nDotV, float roughness)
145: {
146:     float k = (ilb ? ((roughness * roughness) / 2.0) : helper(roughness));
147:     return (nDotV / ((nDotV * (1.0 - k)) + k));
148: }
149: 
150: 
151: float SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(bool ilb, vec3 n, vec3 v, vec3 l, float roughness)
152: {
153:     return (SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, l)), roughness) * SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, v)), roughness));
154: }
155: 
156: 
157: vec3 SLEAardvarkRenderDemo_PBR_pbrDirect_sus2XA3pL9i43DpwtvodNA(vec3 f0, float roughness, float metallic, vec3 albedo, vec4 wPos, vec3 v, vec3 n, float nDotV, SLEAardvarkRenderDemo_SLEUniform_Light light)
158: {
159:     tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d patternInput = SLEAardvarkRenderDemo_PBR_getLightParams_kyLcjVsSKKfWCNmsxKXq1A(light, wPos.xyz);
160:     if(patternInput.Item0)
161:     {
162:         vec3 h = normalize((v + patternInput.Item1));
163:         vec3 kS = SLEAardvarkRenderDemo_PBR_fresnelSchlick_p2rPA4e4MFUMqGJ0C14Tng(f0, max(0.0, dot(h, v)));
164:         float nDotL = max(0.0, dot(n, patternInput.Item1));
165:         return (((((((1.0 - metallic) * (vec3(1.0, 1.0, 1.0) - kS)) * albedo) / 3.141592653589793) + (((SLEAardvarkRenderDemo_PBR_DistributionGGX_9rKdY223uBS_NUz8TxOtw(n, h, roughness) * SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(false, n, v, patternInput.Item1, roughness)) * kS) / max(0.001, ((4.0 * nDotV) * nDotL)))) * patternInput.Item2) * nDotL);
166:     }
167:     else
168:     {
169:         return vec3(0.0, 0.0, 0.0);
170:     }
171: }
172: 
173: 
174: 
175: #ifdef Vertex
176: layout(location = 0) in vec2 DiffuseColorCoordinates;
177: layout(location = 1) in vec4 Positions;
178: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
179: void main()
180: {
181:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
182:     gl_Position = Positions;
183: }
184: 
185: #endif
186: 
187: 
188: 
189: #ifdef Fragment
190: 
191: float SLEAardvarkRenderDemo_PBR_getShadow_GZc3cHBNmbi_Jz2ffBsesQ(vec4 wPos)
192: {
193:     vec4 lightSpacePos = (wPos * LightViewMatrix);
194:     vec4 samplePos = (0.5 + (0.5 * (lightSpacePos / lightSpacePos.w)));
195:     return SLEAardvarkRenderDemo_PBR_poissonSamplingStrat_EpA9Eym8CExypNnxV00GUdw(samplerShadowMap, samplePos, wPos, (samplePos.z - 0.005));
196: }
197: 
198: vec3 SLEAardvarkRenderDemo_PBR_pBRLightning_2wyHfJ4HvFqeUQ4k4HppZA(float metallic, float roughness, vec3 albedo, vec3 n, vec4 wPos)
199: {
200:     vec3 v = normalize((CameraLocation - wPos.xyz));
201:     return SLEAardvarkRenderDemo_PBR_pbrDirect_sus2XA3pL9i43DpwtvodNA(mix(vec3(0.04, 0.04, 0.04), albedo, metallic), roughness, metallic, albedo, wPos, v, n, max(0.0, dot(n, v)), Light);
202: }
203: 
204: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
205: layout(location = 0) out vec4 ColorsOut;
206: void main()
207: {
208:     vec2 m = texture(materialProperties, fs_DiffuseColorCoordinates).xy;
209:     ColorsOut = (vec4(((m.x < 0.0) ? vec3(0.0, 0.0, 0.0) : SLEAardvarkRenderDemo_PBR_pBRLightning_2wyHfJ4HvFqeUQ4k4HppZA(m.x, m.y, texture(color, fs_DiffuseColorCoordinates).xyz, normalize(texture(normal, fs_DiffuseColorCoordinates).xyz), texture(wPos, fs_DiffuseColorCoordinates))), 1.0) * SLEAardvarkRenderDemo_PBR_getShadow_GZc3cHBNmbi_Jz2ffBsesQ(texture(wPos, fs_DiffuseColorCoordinates)));
210: }
211: 
212: #endif

 2: WARNING: load
 2: texture created
 2: result created
 2: WARNING: load
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerView
 9: {
10:     vec3 CameraLocation;
11:     mat4x4 ViewProjTrafo;
12: };
13: 
14: 
15: layout(std140)
16: uniform PerModel
17: {
18:     mat4x4 ModelTrafo;
19: };
20: 
21: 
22: layout(std140)
23: uniform Global
24: {
25:     float SkyMapIntensity;
26: };
27: 
28: 
29: uniform samplerCube skySampler;
30: 
31: 
32: #ifdef Vertex
33: 
34: layout(location = 0) in vec4 Colors;
35: layout(location = 1) in vec3 Normals;
36: layout(location = 2) in vec4 Positions;
37: layout(location = 0) out vec4 fs_Colors;
38: layout(location = 1) out vec3 fs_Normals;
39: layout(location = 2) out vec4 fs_WorldPosition;
40: void main()
41: {
42:     vec4 wp = (Positions * ModelTrafo);
43:     vec4 clipPos = ((wp + vec4(CameraLocation, 0.0)) * ViewProjTrafo);
44:     fs_Colors = Colors;
45:     fs_Normals = Normals;
46:     gl_Position = vec4(clipPos.x, clipPos.y, clipPos.w, clipPos.w);
47:     fs_WorldPosition = wp;
48: }
49: 
50: #endif
51: 
52: 
53: 
54: #ifdef Fragment
55: 
56: layout(location = 0) in vec4 fs_Colors;
57: layout(location = 1) in vec3 fs_Normals;
58: layout(location = 2) in vec4 fs_WorldPosition;
59: layout(location = 0) out vec4 ColorsOut;
60: layout(location = 1) out vec2 MaterialPropertiesOut;
61: layout(location = 2) out vec3 NormalsOut;
62: layout(location = 3) out vec4 WorldPositionOut;
63: void main()
64: {
65:     ColorsOut = vec4((texture(skySampler, normalize(fs_WorldPosition.xyz)).xyz * SkyMapIntensity), fs_Colors.w);
66:     MaterialPropertiesOut = vec2(-1.0, -1.0);
67:     NormalsOut = fs_Normals;
68:     WorldPositionOut = fs_WorldPosition;
69: }
70: 
71: #endif

 2: texture created
 2: result created
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 2: [GL] RenderObjects: +1/-0 (328ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 2: [GL] RenderObjects: +1/-0 (10ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 2: [GL] RenderObjects: +1/-0 (12ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 2: [GL] RenderObjects: +1/-0 (9ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 2: [GL] RenderObjects: +1/-0 (11ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 2: [GL] RenderObjects: +1/-0 (11ms)
 2: using optimized native program
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform Global
  9: {
 10:     float AlbedoFactor;
 11:     bool Discard;
 12:     float DisplacmentStrength;
 13:     float Metallic;
 14:     float NormalMapStrength;
 15:     float Roughness;
 16: };
 17: 
 18: 
 19: layout(std140)
 20: uniform PerModel
 21: {
 22:     mat4x4 ModelTrafo;
 23:     mat4x4 ModelTrafoInv;
 24: };
 25: 
 26: 
 27: layout(std140)
 28: uniform PerView
 29: {
 30:     mat4x4 ViewProjTrafo;
 31: };
 32: 
 33: 
 34: uniform sampler2D diffuseSampler;
 35: 
 36: uniform sampler2D metallicSampler;
 37: 
 38: uniform sampler2D normalSampler;
 39: 
 40: uniform sampler2D roughnessSampler;
 41: 
 42: uniform sampler2D samplerDisp;
 43: 
 44: 
 45: #ifdef Vertex
 46: 
 47: layout(location = 0) in vec2 DiffuseColorCoordinates;
 48: layout(location = 1) in vec3 DiffuseColorUTangents;
 49: layout(location = 2) in vec3 DiffuseColorVTangents;
 50: layout(location = 3) in vec3 Normals;
 51: layout(location = 4) in vec4 Positions;
 52: layout(location = 0) out vec2 tc_DiffuseColorCoordinates;
 53: layout(location = 1) out vec3 tc_DiffuseColorUTangents;
 54: layout(location = 2) out vec3 tc_DiffuseColorVTangents;
 55: layout(location = 3) out vec3 tc_Normals;
 56: layout(location = 4) out vec4 tc_WorldPosition;
 57: void main()
 58: {
 59:     tc_DiffuseColorCoordinates = DiffuseColorCoordinates;
 60:     tc_DiffuseColorUTangents = (vec4(DiffuseColorUTangents, 0.0) * ModelTrafo).xyz;
 61:     tc_DiffuseColorVTangents = (vec4(DiffuseColorVTangents, 0.0) * ModelTrafo).xyz;
 62:     tc_Normals = (ModelTrafoInv * vec4(Normals, 0.0)).xyz;
 63:     tc_WorldPosition = (Positions * ModelTrafo);
 64: }
 65: 
 66: #endif
 67: 
 68: 
 69: 
 70: #ifdef TessControl
 71: 
 72: layout(vertices = 3) out;
 73: layout(location = 0) in vec2 tc_DiffuseColorCoordinates[];
 74: layout(location = 1) in vec3 tc_DiffuseColorUTangents[];
 75: layout(location = 2) in vec3 tc_DiffuseColorVTangents[];
 76: layout(location = 3) in vec3 tc_Normals[];
 77: layout(location = 4) in vec4 tc_WorldPosition[];
 78: layout(location = 0) out vec2 te_DiffuseColorCoordinates[];
 79: layout(location = 1) out vec3 te_DiffuseColorUTangents[];
 80: layout(location = 2) out vec3 te_DiffuseColorVTangents[];
 81: layout(location = 3) out vec3 te_Normals[];
 82: layout(location = 4) out vec4 te_WorldPosition[];
 83: void main()
 84: {
 85:     if((gl_InvocationID == 0))
 86:     {
 87:         float level = ((DisplacmentStrength == 0.0) ? 1.0 : 32.0);
 88:         gl_TessLevelInner[0] = level;
 89:         gl_TessLevelOuter[0] = level;
 90:         gl_TessLevelOuter[1] = level;
 91:         gl_TessLevelOuter[2] = level;
 92:     }
 93:     te_DiffuseColorCoordinates[gl_InvocationID] = tc_DiffuseColorCoordinates[gl_InvocationID];
 94:     te_DiffuseColorUTangents[gl_InvocationID] = tc_DiffuseColorUTangents[gl_InvocationID];
 95:     te_DiffuseColorVTangents[gl_InvocationID] = tc_DiffuseColorVTangents[gl_InvocationID];
 96:     te_Normals[gl_InvocationID] = tc_Normals[gl_InvocationID];
 97:     te_WorldPosition[gl_InvocationID] = tc_WorldPosition[gl_InvocationID];
 98: }
 99: 
100: #endif
101: 
102: 
103: 
104: #ifdef TessEval
105: 
106: layout(triangles, equal_spacing, ccw) in;
107: layout(location = 0) in vec2 te_DiffuseColorCoordinates[];
108: layout(location = 1) in vec3 te_DiffuseColorUTangents[];
109: layout(location = 2) in vec3 te_DiffuseColorVTangents[];
110: layout(location = 3) in vec3 te_Normals[];
111: layout(location = 4) in vec4 te_WorldPosition[];
112: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
113: layout(location = 1) out vec3 fs_DiffuseColorUTangents;
114: layout(location = 2) out vec3 fs_DiffuseColorVTangents;
115: layout(location = 3) out vec3 fs_Normals;
116: layout(location = 4) out vec4 fs_WorldPosition;
117: void main()
118: {
119:     vec3 n = normalize((((gl_TessCoord.x * te_Normals[0]) + (gl_TessCoord.y * te_Normals[1])) + (gl_TessCoord.z * te_Normals[2])));
120:     vec2 tc = (((gl_TessCoord.x * te_DiffuseColorCoordinates[0]) + (gl_TessCoord.y * te_DiffuseColorCoordinates[1])) + (gl_TessCoord.z * te_DiffuseColorCoordinates[2]));
121:     vec4 wp = ((((gl_TessCoord.x * te_WorldPosition[0]) + (gl_TessCoord.y * te_WorldPosition[1])) + (gl_TessCoord.z * te_WorldPosition[2])) + vec4((n * ((-0.5 + texture(samplerDisp, tc).x) * DisplacmentStrength)), 0.0));
122:     fs_DiffuseColorCoordinates = tc;
123:     fs_DiffuseColorUTangents = (((gl_TessCoord.x * te_DiffuseColorUTangents[0]) + (gl_TessCoord.y * te_DiffuseColorUTangents[1])) + (gl_TessCoord.z * te_DiffuseColorUTangents[2]));
124:     fs_DiffuseColorVTangents = (((gl_TessCoord.x * te_DiffuseColorVTangents[0]) + (gl_TessCoord.y * te_DiffuseColorVTangents[1])) + (gl_TessCoord.z * te_DiffuseColorVTangents[2]));
125:     fs_Normals = n;
126:     gl_Position = (wp * ViewProjTrafo);
127:     fs_WorldPosition = wp;
128: }
129: 
130: #endif
131: 
132: 
133: 
134: #ifdef Fragment
135: 
136: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
137: layout(location = 1) in vec3 fs_DiffuseColorUTangents;
138: layout(location = 2) in vec3 fs_DiffuseColorVTangents;
139: layout(location = 3) in vec3 fs_Normals;
140: layout(location = 4) in vec4 fs_WorldPosition;
141: layout(location = 0) out vec4 ColorsOut;
142: layout(location = 1) out vec2 MaterialPropertiesOut;
143: layout(location = 2) out vec3 NormalsOut;
144: layout(location = 3) out vec4 WorldPositionOut;
145: void main()
146: {
147:     vec3 texNormal = normalize(((2.0 * texture(normalSampler, fs_DiffuseColorCoordinates).xyz) - vec3(1.0, 1.0, 1.0)));
148:     vec4 ColorsC = texture(diffuseSampler, fs_DiffuseColorCoordinates);
149:     if(Discard)
150:     {
151:         discard;
152:     }
153:     ColorsOut = vec4(pow((ColorsC.xyz * AlbedoFactor), vec3(2.2, 2.2, 2.2)), ColorsC.w);
154:     MaterialPropertiesOut = vec2((Metallic * texture(metallicSampler, fs_DiffuseColorCoordinates).x), (Roughness * texture(roughnessSampler, fs_DiffuseColorCoordinates).x));
155:     NormalsOut = mix(fs_Normals, normalize((((normalize(fs_Normals) * texNormal.z) + (normalize(fs_DiffuseColorUTangents) * texNormal.x)) + (normalize(fs_DiffuseColorVTangents) * texNormal.y))), NormalMapStrength);
156:     WorldPositionOut = fs_WorldPosition;
157: }
158: 
159: #endif

 2: probing paths for ILU
 2:   /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 2:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/DevILSharp-936b6fb1-0af2-511d-324b-d21b85e42037-64
 2: [Introspection] loaded native library ILU from ILU.dylib
 2: compression: 16.67%
 2: [GL] RenderObjects: +61/-0 (1006ms)
 2: using optimized native program
 2: texture created
 2: texture created
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: 
22: #ifdef Vertex
23: 
24: layout(location = 0) in vec4 Positions;
25: void main()
26: {
27:     gl_Position = ((Positions * ModelTrafo) * ViewProjTrafo);
28: }
29: 
30: #endif
31: 
32: 
33: 
34: #ifdef Fragment
35: void main()
36: {
37: 
38: }
39: 
40: #endif

 2: [GL] RenderObjects: +60/-0 (11ms)
 2: using optimized native program
 2: texture created
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform Global
 9: {
10:     float AmbientIntensity;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     vec3 CameraLocation;
18: };
19: 
20: 
21: uniform sampler2D ambientOcc;
22: 
23: uniform sampler2D color;
24: 
25: uniform samplerCube diffuseIrradianceSampler;
26: 
27: uniform sampler2D materialProperties;
28: 
29: uniform sampler2D normal;
30: 
31: uniform samplerCube prefilteredSpecColorSampler;
32: 
33: uniform sampler2D samplerBRDFLtu;
34: 
35: uniform sampler2D wPos;
36: 
37: vec3 SLEAardvarkRenderDemo_PBR_fresnelSchlickRoughness_g0d3vPX7Vq1a7HjB2Xh00Q(vec3 f0, float roughness, float cosTheta)
38: {
39:     return (f0 + ((max(vec3((1.0 - roughness)), f0) - f0) * pow((1.0 - cosTheta), 5.0)));
40: }
41: 
42: 
43: 
44: #ifdef Vertex
45: layout(location = 0) in vec2 DiffuseColorCoordinates;
46: layout(location = 1) in vec4 Positions;
47: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
48: void main()
49: {
50:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
51:     gl_Position = Positions;
52: }
53: 
54: #endif
55: 
56: 
57: 
58: #ifdef Fragment
59: 
60: vec3 SLEAardvarkRenderDemo_PBR_pBRAbientLight_m9Eo9Sk00tn05l3E8NfGpkQ(vec3 f0, float roughness, float metallic, vec3 albedo, vec3 n, vec3 r, float nDotV)
61: {
62:     vec3 kSA = SLEAardvarkRenderDemo_PBR_fresnelSchlickRoughness_g0d3vPX7Vq1a7HjB2Xh00Q(f0, roughness, nDotV);
63:     vec2 brdf = texture(samplerBRDFLtu, vec2(nDotV, roughness)).xy;
64:     return (((((1.0 - kSA) * (1.0 - metallic)) * (texture(diffuseIrradianceSampler, n).xyz * albedo)) + (textureLod(prefilteredSpecColorSampler, r, (roughness * 4.0)).xyz * ((kSA * brdf.x) + brdf.y))) * AmbientIntensity);
65: }
66: 
67: vec3 SLEAardvarkRenderDemo_PBR_pBRAbient_I7XNvXwUDUTYX4q8DPoVvg(float metallic, float roughness, vec3 albedo, vec3 n, vec4 wPos)
68: {
69:     vec3 v = normalize((CameraLocation - wPos.xyz));
70:     return SLEAardvarkRenderDemo_PBR_pBRAbientLight_m9Eo9Sk00tn05l3E8NfGpkQ(mix(vec3(0.04, 0.04, 0.04), albedo, metallic), roughness, metallic, albedo, n, reflect(n, (-v)), max(0.0, dot(n, v)));
71: }
72: 
73: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
74: layout(location = 0) out vec4 ColorsOut;
75: void main()
76: {
77:     vec2 m = texture(materialProperties, fs_DiffuseColorCoordinates).xy;
78:     ColorsOut = (vec4((((m.x < 0.0) ? vec3(0.0, 0.0, 0.0) : SLEAardvarkRenderDemo_PBR_pBRAbient_I7XNvXwUDUTYX4q8DPoVvg(m.x, m.y, texture(color, fs_DiffuseColorCoordinates).xyz, normalize(texture(normal, fs_DiffuseColorCoordinates).xyz), texture(wPos, fs_DiffuseColorCoordinates))) * texture(ambientOcc, fs_DiffuseColorCoordinates).x), 1.0) + vec4(((m.x < 0.0) ? texture(color, fs_DiffuseColorCoordinates).xyz : vec3(0.0, 0.0, 0.0)), 1.0));
79: }
80: 
81: #endif

 2: texture created
 2: result created
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerView
 9: {
10:     mat4x4 ProjTrafoInv;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float Sharpness;
18:     float Sigma;
19: };
20: 
21: 
22: uniform sampler2D ambientOcc;
23: 
24: uniform sampler2D depth;
25: 
26: 
27: #ifdef Vertex
28: layout(location = 0) in vec4 Positions;
29: layout(location = 0) out vec4 fs_Positions;
30: void main()
31: {
32:     gl_Position = Positions;
33:     fs_Positions = Positions;
34: }
35: 
36: #endif
37: 
38: 
39: 
40: #ifdef Fragment
41: 
42: vec4 SLEAardvarkRenderDemo_SSAO_getAmbient_3JUPR9hvRHsFhqM6Q0oeXQ(vec2 ndc)
43: {
44:     return textureLod(ambientOcc, (0.5 * (ndc + vec2(1.0, 1.0))), 0.0);
45: }
46: 
47: float SLEAardvarkRenderDemo_SSAO_getLinearDepth_eVClZBiYzTbRATT9v005fKQ(vec2 ndc)
48: {
49:     vec4 temp = (vec4(ndc.x, ndc.y, ((2.0 * texture(depth, (0.5 * (ndc + vec2(1.0, 1.0))), 0.0).x) - 1.0), 1.0) * ProjTrafoInv);
50:     return (temp.z / temp.w);
51: }
52: 
53: vec4 SLEAardvarkRenderDemo_SSAO_getAmbient_w008gtWmX_c3gH04aLixjAQ(vec2 ndc)
54: {
55:     return textureLod(ambientOcc, (0.5 * (ndc + vec2(1.0, 1.0))), 0.0);
56: }
57: 
58: layout(location = 0) in vec4 fs_Positions;
59: layout(location = 0) out vec4 ColorsOut;
60: void main()
61: {
62:     vec2 ndc = (fs_Positions.xy / fs_Positions.w);
63:     if((Sigma <= 0.0))
64:     {
65:         ColorsOut = SLEAardvarkRenderDemo_SSAO_getAmbient_w008gtWmX_c3gH04aLixjAQ(ndc);
66:     }
67:     else
68:     {
69:         vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
70:         float wsum = 0.0;
71:         for(int x = -4; (x < 5); x++)
72:         {
73:             for(int y = -4; (y < 5); y++)
74:             {
75:                 vec2 pos = (ndc + (vec2(x, y) * (2.0 / vec2(textureSize(ambientOcc, 0)))));
76:                 float deltaDepth = (SLEAardvarkRenderDemo_SSAO_getLinearDepth_eVClZBiYzTbRATT9v005fKQ(pos) - SLEAardvarkRenderDemo_SSAO_getLinearDepth_eVClZBiYzTbRATT9v005fKQ(ndc));
77:                 float w = (exp(((-dot(vec2(x, y), vec2(x, y))) / (Sigma * Sigma))) * exp((((-deltaDepth) * deltaDepth) * (Sharpness * Sharpness))));
78:                 sum = (sum + (w * SLEAardvarkRenderDemo_SSAO_getAmbient_3JUPR9hvRHsFhqM6Q0oeXQ(pos)));
79:                 wsum = (wsum + w);
80:             }
81:         }
82:         ColorsOut = (sum / wsum);
83:     }
84: }
85: 
86: #endif

 2: texture created
 2: result created
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform Global
 9: {
10:     float OcclusionStrength;
11:     float Radius;
12:     int Samples;
13:     float Threshold;
14: };
15: 
16: 
17: layout(std140)
18: uniform PerView
19: {
20:     mat4x4 ProjTrafo;
21:     mat4x4 ProjTrafoInv;
22:     mat4x4 ViewTrafo;
23: };
24: 
25: 
26: uniform sampler2D depth;
27: 
28: uniform sampler2DShadow depthCmp;
29: 
30: uniform sampler2D normal;
31: 
32: uniform sampler2D random;
33: 
34: const vec3 _constant0[] = vec3[]( vec3(-0.06559896944229449, -0.006665463975887605, 0.12828401494513642), vec3(0.15180361733584158, -0.16958289435577792, 0.5175607771105494), vec3(0.15084913009229584, 0.16113333130774526, 0.24123495025306846), vec3(0.11002771798142598, 0.02169277595899419, 0.7757497857628597), vec3(0.534016572020935, 0.3450159451999019, 0.4246773699591801), vec3(-0.6720795090443907, 0.3179263621696393, 0.6074348656465207), vec3(-0.040484839086289186, -0.04017690661930334, 0.05644516719206713), vec3(-0.04407715529013064, -0.2929725222045761, 0.27367037395269667), vec3(0.06258079747287124, 0.35786508862173366, 0.5799486885001497), vec3(-0.018021784426118653, -0.003208134354683993, 0.150208537556467), vec3(-0.10809131000043891, -0.09768017805392418, 0.9044072235554865), vec3(-0.2301991227237496, -0.08089188254177838, 0.19623671441975396), vec3(-0.4428625115386026, 0.34626545827156174, 0.7757667766538732), vec3(-0.7180971410432698, 0.14254660433279734, 0.35271900289046304), vec3(-0.025798491866901113, -0.4590916449176218, 0.6909364792814792), vec3(-0.20817760766014376, -0.1957858000344675, 0.19999866665050947), vec3(-0.16363044278979216, 0.257289089425637, 0.250465601894093), vec3(0.023003450961799787, -0.010547789847728398, 0.6637768439514907), vec3(0.21438147419651382, -0.38089157621991165, 0.33029011766452954), vec3(-0.0027994291316385546, -0.008451490977604193, 0.12700715925247502), vec3(-0.08811261925922526, 0.041977467922072194, 0.21993162687467624), vec3(0.028372028868421852, 0.12805772860377632, 0.7557797579377379), vec3(-0.6534953698220805, 0.09140248525542184, 0.3651222064412256), vec3(0.12360918105526021, 0.04635674802896133, 0.6163084927786507), vec3(-0.09115560980441921, 0.2162122217632951, 0.826756721856537), vec3(0.16496918555183968, -0.30808119736793355, 0.2610503113745059), vec3(-0.15011274380318015, -0.14007062535271286, 0.11895987382815429), vec3(-0.18003643786591772, 0.024629609134565765, 0.3569846731386878), vec3(0.04624058217166823, -0.07838118420522254, 0.547196494887292), vec3(0.05636713726473161, -0.020402472283205852, 0.0638627659471579), vec3(0.08282817849422183, 0.09726150158763179, 0.9215070070793815), vec3(-0.4508483674168564, 0.4427201822690842, 0.6836323056847233), vec3(0.2688000791036526, 0.60617131083757, 0.6616389347393291), vec3(-0.6237452725798363, 0.5509027482434856, 0.4220482695559035), vec3(-0.045510778561744604, -0.2069587343867144, 0.18646995912533063), vec3(0.2501426857470049, -0.3745932767366562, 0.7030064493408852), vec3(0.02932253436371137, -0.519906815433537, 0.8033047821673629), vec3(-0.09334041522099616, -0.16983034494876756, 0.5547385918642396), vec3(0.11363499913416977, -0.0667898283661671, 0.23858290033622093), vec3(-0.002516876149514778, 0.11679132964739052, 0.15750096793075094), vec3(-0.33926497737267114, 0.09586811206181176, 0.9316894282853393), vec3(-0.4403104906355805, -0.34032906439048904, 0.7651173250055936), vec3(-0.3588536563954914, -0.5097749647667114, 0.35749956437866587), vec3(0.10350119619659046, 0.1786405593482427, 0.30725298990239086), vec3(0.012258676149231158, 0.35366380353252724, 0.44916167157511266), vec3(0.23436700001019986, 0.6688851246807929, 0.6211492404068393), vec3(0.017389525964216817, -0.04288747958029744, 0.4597168432178227), vec3(0.26667719014569113, -0.14758011692753062, 0.7485785821598725), vec3(0.1399876610419344, -0.030904860757974495, 0.15741632043567622), vec3(0.0604054429963994, -0.016697403231059536, 0.0385722425583782), vec3(-0.14381472968270062, 0.011608279808396573, 0.7500174288386678), vec3(-0.4900510556667512, 0.13515996154245752, 0.5395962005447815), vec3(-0.14254697294173127, 0.12947061055102294, 0.4068592111508572), vec3(0.1242467325898867, 0.0012596396685707434, 0.676220657622361), vec3(0.0896775441402037, 0.21035916973629787, 0.9017945232798275), vec3(-0.1825290837527474, 0.03486968114964663, 0.3282032971416918), vec3(0.29431440088180766, -0.2713321992727064, 0.7056171209524178), vec3(0.31715429959631564, 0.5053649841642748, 0.3597122491573205), vec3(-0.8021158242313159, -0.04049065297590463, 0.45770670304891714), vec3(0.12229855621902672, -0.03280497368461393, 0.30296302262637), vec3(-0.6377211782286274, 0.09144196064275356, 0.3276790889405613), vec3(-0.07698419460212129, -0.11649390199855056, 0.6651753475050644), vec3(-0.15158986854204023, 0.001256210876428272, 0.8349626207172997), vec3(-0.24658867920712982, -0.3633472331329299, 0.4040869761882164), vec3(-0.08776769887468555, -0.029251124009462896, 0.20070394599118685), vec3(-0.13371617697012375, 0.3397850860090339, 0.9149713422090695), vec3(-0.17750404636421854, 0.05029623155243952, 0.32807285599289276), vec3(0.008737227347127724, 0.0019625822260947367, 0.023276455433940007), vec3(0.2625545771167058, -0.41996222557475693, 0.1897359185132495), vec3(0.23343826444748228, 0.25515895723403, 0.9329908085294042), vec3(0.005305943008249557, -0.006586724751238489, 0.3914001764102311), vec3(-0.012163690274150419, 0.03875064557334698, 0.8059592498829822), vec3(0.28202909294139333, 0.14645749880315484, 0.2289725103051772), vec3(0.06412695915672875, -0.1475892065945037, 0.31277854294713514), vec3(0.010974384447315428, -0.005915268858946307, 0.13056402301968284), vec3(0.013361942207250758, -0.03472680181103488, 0.2921575368147086), vec3(-0.020510757582397218, -0.026906422696145783, 0.034653604576724506), vec3(-0.15681801156279634, 0.19753623638433723, 0.28950938969457457), vec3(-0.020138159770034837, 0.00018998862887719257, 0.05489458279525079), vec3(0.19004122020679193, 0.17795983028663226, 0.8792482095641012), vec3(-0.10109325904962956, -0.36263880620523314, 0.8984836747550884), vec3(-0.2984798518905089, -0.20988428912366078, 0.22568083657990326), vec3(0.028455025358938096, -0.02247477134482634, 0.18412327201154347), vec3(0.25147552865154305, -0.05514936069295587, 0.4064451468695125), vec3(-0.21337435173911554, 0.18290320195349358, 0.16086481839712893), vec3(0.11245574106727216, 0.0019145447392398332, 0.15186902104498998), vec3(-0.04462432173006095, -0.34729577220892954, 0.3294799488432878), vec3(-0.12969851798436818, 0.028045754869075894, 0.210918724883686), vec3(-0.001512763865813807, -0.001131016727174999, 0.0020177830755977), vec3(0.5837155153043337, 0.38675628684583874, 0.5735082938776457), vec3(-0.003717363087449983, 0.0065871217399469, 0.022433254946194206), vec3(0.004944735865217994, -0.14235884036901544, 0.21826306410968904), vec3(-0.1585667283593114, -0.046145255539924795, 0.6423182310828844), vec3(-0.4081817252236264, -0.6849131331314819, 0.5057865464988416), vec3(0.22781760206895219, 0.09438611520723085, 0.4039912085336231), vec3(0.06347239314406723, -0.18687124878432937, 0.24741642688709065), vec3(0.05792023361488842, -0.06446944190781682, 0.044635601016451344), vec3(-0.06388862674653872, -0.03714458210384902, 0.09693616006061036), vec3(-0.07051379958010033, 0.03868108308286403, 0.12563746025800862), vec3(0.316834480394574, 0.4225891926377689, 0.2553834429468047), vec3(0.0857732067320832, -0.22057458989147166, 0.5141826529416604), vec3(0.03261167702309757, 0.00035128399754080634, 0.43588235966992017), vec3(0.08490125400166253, 0.043401166969200836, 0.26099682738135016), vec3(-0.14247043106157317, 0.14422730120734567, 0.07985100205809172), vec3(0.3024343725406683, 0.5259098071199231, 0.31178543701078476), vec3(0.8390697403290729, -0.08240190712872478, 0.4523427355172086), vec3(0.05537467547041988, 0.15282791186549294, 0.3095695515902703), vec3(0.04151014981668469, -0.028644439181746823, 0.08447332330569471), vec3(-0.0763027284591415, -0.03546253856008867, 0.5499844954682145), vec3(-0.10984541145081422, 0.46057702229975844, 0.4243453213442136), vec3(-0.056962475613080786, 0.001899979465507834, 0.32375167525586585), vec3(-0.31456371050294446, 0.2296138955919232, 0.1758025425104527), vec3(0.31249631696156827, 0.11938203146461439, 0.5435189134236025), vec3(-0.0035403531606330294, -0.005228340378639632, 0.0038957928641258446), vec3(0.27808598511877175, 0.16194402840717337, 0.14796948438298765), vec3(0.04713013338244762, 0.01194405163308899, 0.28969925370322014), vec3(-0.10293156951826692, 0.020818939645930564, 0.48067544186290356), vec3(0.29430996552295985, -0.1740811978424188, 0.13463409003921717), vec3(-0.018577202281162514, 0.20390939958894208, 0.1804652698791738), vec3(-0.007969942913708436, 0.005939546443697243, 0.030435864113796503), vec3(0.18462401745553056, -0.3262517815885017, 0.33740434085618115), vec3(-0.014204826584358711, -0.02120705277985579, 0.12461376335044168), vec3(-0.019487409672529394, 0.0044654098151262235, 0.009594973426495653), vec3(-0.21087973755503353, 0.266830180388843, 0.5246899242063638), vec3(0.16895804228492134, -0.007897999763163105, 0.9565093810626383), vec3(0.045096825045866484, -0.010403509063087997, 0.12240162476034464), vec3(0.033135823715233596, 0.06907546516793822, 0.12166103407213792), vec3(-0.2874435836486636, 0.1524704837946056, 0.307183564003385), vec3(0.06474658985580893, -0.01950504066708937, 0.8758335614512), vec3(0.5622588599019617, 0.010777507121877434, 0.5894372332931928), vec3(-0.0819740027607074, -0.08888400899143581, 0.15556839638994582), vec3(0.20611285840251772, -0.16057451386619426, 0.8889340257816882), vec3(0.1264729835702787, -0.15757855896110276, 0.11957970582404409), vec3(-0.009215267949472356, 0.005495839269541068, 0.47167613609641557), vec3(-0.31513821513558404, 0.03825761876002393, 0.14963844984773064), vec3(0.2108481910624533, 0.42095806651983286, 0.25841161833513526), vec3(-0.0007951136176954768, -0.005275026586089641, 0.1510746092928404), vec3(0.4989669775158401, -0.6377844165433016, 0.5335904174266626), vec3(-0.22478578888411646, 0.019025256563398374, 0.7665178923284648), vec3(-0.06106871765232939, 0.009871162459844561, 0.3617823403968084), vec3(0.15508993909312088, 0.10560829935411119, 0.8180891470309997), vec3(0.18819361484835972, -0.2938314251129979, 0.15647309034389054), vec3(0.536024104115353, -0.10562945269206961, 0.4260275647024455), vec3(0.0035650198515204115, -0.0009803689882218014, 0.3669259823822735), vec3(0.003983266404645585, -0.17232975423034094, 0.549995639482045), vec3(0.1434337715005123, 0.022961804503895813, 0.5784200150009081), vec3(-0.18188408482434115, -0.47099336960295357, 0.36398685760857336), vec3(-0.15951824443109122, -0.16345093057221338, 0.6147333664144027), vec3(0.07448716991070316, -0.2812516956019066, 0.5132961094544345), vec3(-0.043537732805399194, 0.11472030266511561, 0.1310867583117748), vec3(-0.3305432349537919, -0.010487247837302822, 0.7552410816155056), vec3(0.05991802402516682, -0.0037860647351200933, 0.7275222586005394), vec3(0.09024633033835192, -0.0188888906459984, 0.8439401348111126), vec3(-0.019325621142787297, -0.009049148269328563, 0.11519744386631833), vec3(-0.0444655456057965, -0.03419224616624344, 0.060258703875488005), vec3(0.14416572506644446, 0.30553227013937506, 0.2800718699870137), vec3(-0.3066655128175632, -0.1907864042426101, 0.20425376934475253), vec3(-0.33345829677530525, -0.06030142129450858, 0.55771773579483), vec3(-0.06983437811497491, -0.21553766536631888, 0.09720291751424025), vec3(-0.007182729153875881, 0.07620624215127716, 0.5458987280913025), vec3(0.29984269491863985, -0.24480210793589954, 0.7149530594530462), vec3(-0.023663882513462704, 0.2513807301745953, 0.8661246955237777), vec3(0.16517746739463066, -0.12015445752062982, 0.08157494037028766), vec3(0.2762718442604975, 0.6222491087636804, 0.2943105271915741), vec3(-0.22786600978641827, 0.1613204578575872, 0.3385070508443217), vec3(0.0314580915491809, 0.0034968379014741705, 0.40094592840486176), vec3(0.14943200654502878, -0.07431750321085176, 0.0959423813064459), vec3(-0.08879983516406902, -0.09891665476599497, 0.10012374621489432), vec3(0.18151186751617276, 0.5000346758457686, 0.3846660482269718), vec3(0.7088330249419413, -0.11909056702058328, 0.3886781004029911), vec3(0.054707289390583946, 0.10558766551961585, 0.0786639108985909), vec3(-0.07324116511516357, 0.05050636477377901, 0.5146086125557388), vec3(0.1885926007585777, 0.08696086014953724, 0.5291726129549558), vec3(-0.5824513601224878, -0.49945638112755536, 0.48160829039447073), vec3(0.0010629373079643803, 0.04202973610211807, 0.18804449447777977), vec3(-0.08751974465615028, -0.056340367206022306, 0.06352268811469222), vec3(0.05611643629313207, 0.08498955395402516, 0.4222884784751032), vec3(-0.012449689523421107, -0.07797659940787195, 0.6504555800600719), vec3(0.03504857198732858, 0.017276637955160927, 0.029397796844358892), vec3(0.1740119577251437, 0.3050110875012179, 0.13148890719827644), vec3(0.28887487070772794, -0.19480400927738462, 0.3702918398291089), vec3(-0.00030277959779536083, -0.023736813744431567, 0.4874065871542727), vec3(-0.09921235223123925, -0.06828213112080689, 0.848953040636554), vec3(0.14385646320598847, -0.5244843833723135, 0.43893249448259075), vec3(0.0960630961017617, 0.7951080817374394, 0.5822909724016225), vec3(-0.006148865993282231, 0.4228213087641233, 0.1982615944078435), vec3(0.03489351285238437, -0.00429977475793131, 0.06915078030000672), vec3(0.011162788837810736, -0.00441092051361851, 0.11701748802355508), vec3(0.05915570136680059, 0.0008357988581219243, 0.3849535620907508), vec3(0.31323157373993454, 0.517803475348088, 0.6824424915792198), vec3(-0.03332460209976386, 0.03932139932002329, 0.11073192594478752), vec3(-0.0366346819528786, -0.1283966672723736, 0.48036272773611394), vec3(0.15592789105798546, -0.02623992589924002, 0.7057348653792909), vec3(0.16153190196049094, -0.10631150341573313, 0.15492908006959008), vec3(0.22447441741765103, 0.2509728601656112, 0.43995582813515943), vec3(-0.19089292861372897, -0.4368245626682456, 0.8068457876076153), vec3(-0.11912477979227375, -0.09334651854616903, 0.05908582347974107), vec3(0.5897548808786596, -0.0957240956615559, 0.7400010106550355), vec3(0.37188516956417933, 0.14560976183830734, 0.8378396881758272), vec3(-0.15389637034071063, -0.04385726310498313, 0.06878839980827085), vec3(-0.3546677001183713, -0.030167740404108065, 0.1908322551400617), vec3(-0.20578832126858732, -0.14184650075373742, 0.38140087781096915), vec3(0.6513325351576555, -0.317927549521162, 0.6879914980756812), vec3(0.38881174218709813, -0.49019450477727317, 0.45375947653102944), vec3(-0.0005893548795612852, 0.026082232905841156, 0.026198666848805747), vec3(0.22739300584158567, 0.15797193580653957, 0.12116677122358628), vec3(-0.08639050071729845, -0.05820813754367944, 0.12345190908652741), vec3(-0.3997357716963177, -0.42870959887502447, 0.7387740104048995), vec3(0.47188086982161037, -0.2904241115917777, 0.7400183173111585), vec3(0.4268714145315098, 0.1890957681390554, 0.8392646858217195), vec3(8.443389958994264E-05, 0.00031242521122118677, 0.004424750004772765), vec3(-0.47014523152740106, -0.32406863904251054, 0.5010766918517205), vec3(0.4333976232748901, 0.26269119920305667, 0.3280369332612917), vec3(-0.35364006532029857, 0.7384962192942847, 0.2986609256846603), vec3(-0.016382293761336073, 0.010309649869786688, 0.038169442022356566), vec3(0.2258580513098489, 0.03470738402233177, 0.23114444263740563), vec3(-0.009923548602204285, -0.005506926703477481, 0.04325988100990844), vec3(0.2519574072732348, 0.13911795473316252, 0.43435656929707156), vec3(0.01383987132859789, -0.20878038630235246, 0.7218018352476696), vec3(-0.09825476314186686, 0.34479977312110255, 0.9031932834304797), vec3(-0.023843611621493805, 0.04776778751193458, 0.3201980686187415), vec3(-0.042038505157758574, 0.005512345135987039, 0.061711769654008104), vec3(-0.562915209374108, 0.23087576599472306, 0.48318202705672536), vec3(0.0160111180977995, -0.024395601554025037, 0.7437753903137778), vec3(-0.20373607246187264, 0.27861742544079526, 0.603217390227615), vec3(-0.2417598321713186, -0.30674125450586864, 0.5120627454592674), vec3(-0.03693917320993539, 0.11949513712279912, 0.7891609399182193), vec3(-0.00485595422912666, -0.16873393102501433, 0.27265520939577687), vec3(-0.07194402547717084, 0.30513560374270665, 0.1597987557422993), vec3(-0.026640800719101965, 0.022581168400452885, 0.25313640417183064), vec3(-0.4588191089063567, 0.6928696366905451, 0.4795867812176662), vec3(-0.27218811773833446, 0.32266888431196344, 0.23533256414324477), vec3(-0.28673583818176557, -0.25884660986478414, 0.6159685031761353), vec3(-0.26628781859160194, 0.2928626933918217, 0.7800333234221792), vec3(-0.17865060583157008, 0.007417355610476941, 0.9544885164705331), vec3(0.009278717271346083, -0.03765376101000836, 0.035302731629844555), vec3(0.04433850264784198, 0.38771023450696707, 0.2941187263706927), vec3(0.006291468386933831, 0.00409571453806263, 0.0842272363647967), vec3(-0.07289985130647898, -0.04038285075958965, 0.6566448164179609), vec3(-0.014569026565340088, 0.2852039909417563, 0.6258920287239331), vec3(0.10412682202070954, -0.017785311473549635, 0.28666317983942113), vec3(-0.07446597838160164, -0.10107919319334185, 0.04828363627318122), vec3(-0.00658664320412522, -0.10883381202634781, 0.15944638799763056), vec3(-0.12113889160691654, 0.18970054628545927, 0.36531452286441146), vec3(-0.613404270769445, 0.1388076451786859, 0.6544892427553037), vec3(0.11189722958523932, 0.29409602760511727, 0.17987197981471847), vec3(0.10868578430376676, -0.16467650215796292, 0.8728554237037884), vec3(0.44912771964926024, -0.09682307978403956, 0.7171016819483326), vec3(0.020622394216500473, -0.13743985543439835, 0.15068303101754957), vec3(0.1515305377006835, -0.1499185373243327, 0.0836611152738157), vec3(-0.3219598770304216, 0.3475719364039817, 0.7562840746050561), vec3(-0.1498035826651925, -0.037161704188590515, 0.6225611045155816), vec3(-0.12012325636136482, -0.13966509001040356, 0.07677168945283946), vec3(-0.18643253826761005, 0.5563798182114292, 0.7552473595904438), vec3(0.6056332039882941, 0.14263236061978227, 0.5784660191961216), vec3(0.05114826382798541, -0.05229715443447781, 0.3207680895485777), vec3(-0.01967820371563502, -0.024326525220314903, 0.6783346082679977), vec3(0.010806125987487987, 0.012919598223512177, 0.25441741543235463), vec3(0.008945102434643741, 0.03339240153812314, 0.06981523989479793), vec3(0.041483252207296026, 0.04366032358683388, 0.38832255068456556), vec3(0.3337663498563241, 0.30570466117348516, 0.21994526227791686), vec3(0.6419613928046595, -0.3540715559029851, 0.4117614793302339), vec3(0.5182567606099516, -0.13501723211841613, 0.2503554739298115), vec3(0.02149671326021851, -0.03463662293714358, 0.6676926375123164), vec3(0.0001606050121271245, -0.0006117048422085805, 0.0006599262028320398), vec3(-0.14653707606478872, 0.46024945044217724, 0.19564310756126208), vec3(0.0015356124299583625, 0.01077876018867644, 0.030749602669944896), vec3(0.42608859395764537, -0.04987757716754873, 0.5893815651308184), vec3(0.0008329706196904392, -0.47052933581882456, 0.7677658883152214), vec3(-0.46642398722398953, 0.657042065923758, 0.5758010451192859), vec3(0.25734307933855016, 0.6437345456470465, 0.4678572213421964), vec3(-0.6809803784618067, 0.40178334508135666, 0.5447460547712953), vec3(0.00018832329385404486, -0.009038606260104646, 0.8590988798010212), vec3(0.010269238047065126, 0.05190338326935434, 0.03520859801629893), vec3(0.5765123501862126, 0.15898727436478283, 0.2936613792059043), vec3(-0.0044854364071180665, 0.08859792126254476, 0.16813891724400531), vec3(-0.6943309052663608, 0.08447117908507668, 0.5368281924924824), vec3(0.11803099450181512, -0.13985271075217778, 0.2958283893255049), vec3(-0.5945582294502757, -0.14587976984893658, 0.5702868962567205), vec3(0.016745352103218456, 0.25284316775342874, 0.2153447062699333), vec3(0.16113155979200727, 0.15934918425443592, 0.7140304024607985), vec3(-0.0006280330027811415, -0.4563216854815472, 0.8302069051080517), vec3(-0.07235959912815017, 0.07364225807915661, 0.05220489687832535), vec3(0.05076071787535459, -0.014386139311994582, 0.11098808749585201), vec3(0.2352998787781213, 0.08684769890884292, 0.2625577319976254), vec3(-0.08437158584735743, 0.23988513951688079, 0.19105299742726084), vec3(0.11620986373409431, 0.020714510582337455, 0.2580096245765862), vec3(0.26915796807178105, -0.1135399891964195, 0.7131549695985254), vec3(-0.003913213305046001, -7.4138467188533005E-06, 0.02484697329913142), vec3(0.445457836118894, 0.3854815031292277, 0.25543839817423836), vec3(-0.003878548226546581, -0.014675995171430829, 0.3730776425810068), vec3(0.2051921396795384, 0.00914042723903117, 0.11145742659520964), vec3(-0.003992608175620549, 0.004393411187875502, 0.0030095113815213643), vec3(-0.14787275702733757, 0.009323066061305766, 0.22445323108241497), vec3(-0.09630415920977844, 0.05535390601672093, 0.1476193254947016), vec3(0.04397985380823332, -0.006482911446097374, 0.4625255431229403), vec3(0.0938045490350414, 0.37073729062547744, 0.3859544151105979), vec3(-0.27155949594680623, -0.39289590351640946, 0.21610326983856956), vec3(0.0018915268530594128, 0.0006148874334131931, 0.42816830607902695), vec3(-0.29032135815012544, 0.16361985711864105, 0.19586608096855213), vec3(0.26992365906856125, 0.09254204092488584, 0.1654161627166676), vec3(-0.0005900705135592525, -0.08120676340051212, 0.14466468527562495), vec3(-0.42393253769062805, -0.34302039384576527, 0.7793352526634594), vec3(-0.023045395550928018, 0.024757059322929865, 0.2119522410712521), vec3(0.09389706557670677, -0.2229411281189295, 0.30924587929329084), vec3(0.42885202134821254, -0.13002459981490408, 0.817496502700077), vec3(-0.2522462598107139, -0.09680435061173139, 0.7341213375412475), vec3(0.015063094187414871, 2.6443314556301133E-05, 0.13518385370498745), vec3(0.008826219420121786, 0.25355786497189625, 0.14080230005897756), vec3(0.3458716969333051, 0.09804544583612312, 0.5528507363878618), vec3(-0.21049611497160145, 0.12891479790672591, 0.37301800534226603), vec3(0.18796425307895018, -0.06602412888151014, 0.26458060520891186), vec3(-0.06833163712268428, -0.09092828130887018, 0.4025492802999875), vec3(-0.3258011486158034, -0.10079615061413937, 0.6627683640304705), vec3(-0.19598682225911748, -0.5719681943011716, 0.2212820328915594), vec3(-0.03614763174750844, 0.3148152024427947, 0.4567016027682314), vec3(-0.05754016769831988, -0.22144197612852143, 0.6881190488265958), vec3(0.32455776655522944, -0.2412751055107397, 0.23610813613332127), vec3(-0.04324422194516998, 0.19670146940852667, 0.23015456318445843), vec3(-0.07649898206961073, 0.5907709720026849, 0.33379901540481227), vec3(-0.0991133584628257, -0.020444791144680584, 0.21475183534577427), vec3(-0.1178856444901674, -0.1968505775070716, 0.12638196074517113), vec3(-0.40024934359678266, -0.20348541486095822, 0.5420003493808783), vec3(-0.23142544218880925, -0.029397074922200256, 0.11110342645013874), vec3(-0.25188617688033416, -0.29989673262278504, 0.47672348556667904), vec3(-0.04547811368959362, -0.12259354204224379, 0.5883235681740364), vec3(0.8451029203611439, -0.2178951579361184, 0.38405478988908004), vec3(-0.3525338809956355, 0.14407761579676576, 0.4508844769096839), vec3(0.19712081655383307, -0.1260325939910692, 0.8470933383926159), vec3(0.012102846894554127, -0.0900851597830616, 0.1799314143090066), vec3(0.575079861892797, -0.1789487025989891, 0.2357574674010073), vec3(-0.27304511021041267, 0.1241853216783465, 0.1944753586635661), vec3(-0.07662730723785453, 0.48081917666685225, 0.7802307844719333), vec3(-0.04829379919213146, -0.15152599043304293, 0.4210819565426061), vec3(-0.00037465095507031404, 0.000308389850257379, 0.002670934510661046), vec3(0.14536509119950067, -0.3929822152037361, 0.4056978717135863), vec3(-0.17184226106859166, -0.12571015953293369, 0.973150231201514), vec3(0.05321870493322726, -0.021246388570441296, 0.8992332104355224), vec3(0.025454772918929256, -0.05948099993585895, 0.7273958967920121), vec3(0.040835278121960895, -0.012306798481752985, 0.4287220748630028), vec3(-0.10283620782213503, -0.356372534857595, 0.3866618540786857), vec3(2.5624209214473762E-05, -0.024170693980702068, 0.14571862716712938), vec3(-0.017724492415958536, 0.049155461758479714, 0.47765379920964407), vec3(-0.2859067432711016, -0.0670462129580803, 0.21793480051891184), vec3(0.03390027832079843, -0.06706712463291836, 0.17971760170281706), vec3(0.00308502135675629, -0.001138875253867714, 0.04205917318435853), vec3(0.29515552434903214, -0.6576271295645457, 0.3811187723542532), vec3(0.1407972674281803, -0.08246646384544265, 0.204079891315854), vec3(0.4847354600846315, -0.23411941592377858, 0.317779905139672), vec3(-0.07372802097865955, -0.05249345838420523, 0.6223261240307782), vec3(0.13282996832062707, -0.14994558884428366, 0.7118498144519638), vec3(-0.04158522674483267, -0.008344407357502345, 0.06189827822492028), vec3(0.0004091314715531501, -0.009966958448502502, 0.21816647696762825), vec3(-0.5367801112223486, -0.2884903634515675, 0.4291230375740782), vec3(0.06772206595294723, 0.0029170013957862833, 0.13285519291199702), vec3(0.0035388392412805713, -0.057812043454963186, 0.0353830837275073), vec3(-0.037133476341781504, 0.34303452724971495, 0.30734538357879876), vec3(-0.11812624147751428, -0.24145448244034587, 0.6385169488862076), vec3(0.02642998656495984, 0.2108432093584774, 0.5586150697483757), vec3(-0.17759612496341545, -0.010974670769435787, 0.7696426352862065), vec3(0.7813194397337443, -0.4296097512285621, 0.4036657006391766), vec3(-0.015266155696497266, 0.002803400890375376, 0.19143413300646775), vec3(0.05850019135697352, 0.19399009524778205, 0.158437774359887), vec3(0.03591755222989105, -0.05745406961521283, 0.05705099366013992), vec3(-0.0003858774484933162, 0.005768216454982263, 0.011285397714219169), vec3(0.05917142805978706, 0.05821200974894529, 0.03428113839367069), vec3(-0.34611939745940856, 0.05674171380569424, 0.21523489471126173), vec3(0.11447422573663267, 0.5241871312534415, 0.8059323793653588), vec3(0.19129152185970977, 0.12882270342602678, 0.7059326981482483), vec3(-0.014024645538372368, 0.01350327192992349, 0.05739378568127466), vec3(-0.44433152683834953, -0.02991552822357008, 0.3390266679874418), vec3(0.01661750393759693, -0.42019614715300574, 0.7087330408554838), vec3(-0.08831467206757244, -0.03784967119031552, 0.7317442674394151), vec3(0.03912915649189007, -0.12948589688255183, 0.8644737025330113), vec3(0.02409912999815859, 0.09394658998079644, 0.11052750565976681), vec3(-0.027279021821676488, 0.056217581495302274, 0.06434430163341709), vec3(-0.20100056597664445, 0.31938392635731855, 0.6842928267228191), vec3(0.09789707364295998, 0.29021744637908403, 0.14325369934926657), vec3(0.0007380748660966825, -0.034227637824094936, 0.053592829994079945), vec3(-0.002346191576856867, 0.009553594502135906, 0.5746966467925697), vec3(0.21816705205420758, 0.6502237430626449, 0.3865937718612638), vec3(-0.47030579625107904, -0.06815483837125168, 0.5033186171119217), vec3(-0.06231289483838796, 0.7940721315466137, 0.5449413686468093), vec3(-0.08186901528594005, 0.09559847140428468, 0.21593330436940394), vec3(-0.10861904694516956, 0.01768250533833256, 0.4487926292054862), vec3(0.060444473499565936, 0.5267229259280329, 0.21400478265311462), vec3(0.03547392135217118, -0.01964530235122021, 0.13304943710758607), vec3(-0.01597325178832171, -0.03147936483106145, 0.17075057658750578), vec3(0.0050290314519158595, 0.010947129600017152, 0.3007240441172933), vec3(-0.10997529404166008, -0.001228955729669037, 0.9283497194273803), vec3(0.0872663641248544, -0.03091478205227949, 0.07815012572585459), vec3(-0.2217593445475005, -0.003990094482897411, 0.20699312484540766), vec3(0.15744776818418946, 0.068828719871009, 0.2500384598269115), vec3(-0.04978635755912502, -0.050248519591157725, 0.9376598032842122), vec3(-0.10162486995195211, -0.11820644362730515, 0.42435198877294444), vec3(-0.03391712169375406, -0.23650054036403817, 0.2471320596320642), vec3(0.37636630071949007, -0.07147864812164882, 0.8038836560980384), vec3(0.25203805751127506, 0.11705921979480272, 0.276370091085236), vec3(0.007286927766461543, 0.05832891880281903, 0.3480874015437355), vec3(0.03809849770993473, 0.07578178242669785, 0.06187603132752792), vec3(-0.009983008670978604, -0.2716494760052865, 0.5690827496984995), vec3(-0.007845869740575597, -0.011198033924085408, 0.8470719355629232), vec3(-0.1347750418392891, 0.16776397603717896, 0.471889866239085), vec3(-0.016086590260345892, -0.06495499977333934, 0.5605253607928532), vec3(-0.00021215451625133944, -0.0026408330959818193, 0.06912180754676547), vec3(-0.017010327229873196, -0.7055900151891985, 0.5829274015083503), vec3(0.07620639322613477, -0.017780324737502597, 0.32779913430261015), vec3(0.17494863681057127, 0.07991517822088444, 0.2844840564046593), vec3(-0.33577486123815237, 0.39201430808650245, 0.30251124143695224), vec3(-0.04530955795585364, -0.015917373081436568, 0.03505280024387819), vec3(0.05026466918189321, 0.08989998486821645, 0.2672630206866334), vec3(0.0077931177560203, -0.026838938863645675, 0.12075287412786605), vec3(-0.4148639427338827, 0.080505548451872, 0.46614768201383766), vec3(0.014365498004789864, 0.00014144092318335054, 0.01781364479334818), vec3(4.5309354760042255E-05, 8.615177395938163E-05, 0.002640847509991745), vec3(0.014363034399220202, -0.006040025535325613, 0.2861203131697832), vec3(0.1101430583063637, -0.1385261849762738, 0.14211412648211505), vec3(-0.002842710231020168, 0.003792786887897784, 0.005515530164638111), vec3(0.32874038970236935, 0.1281159203657669, 0.5176909926762687), vec3(-0.1311480779896726, 0.3116915043322398, 0.28297543929978347), vec3(0.11237760043813051, -0.5609220473700736, 0.7593386742713937), vec3(-0.07204326448325438, 0.14274405437190799, 0.17514460523193104), vec3(-0.005249355036995226, -0.0014180212413081317, 0.6672085951707636), vec3(-0.33287953854345437, -0.5670143672297563, 0.46929691381604527), vec3(-0.174188513310521, 0.5883891834595055, 0.7113537401414797), vec3(-0.023102556294345565, 0.11196771096407385, 0.2294117836896411), vec3(-0.21486204561788352, -0.12374579205509952, 0.45788673710420974), vec3(-0.3310251616354598, -0.2436501817951975, 0.6836552507457103), vec3(-0.20664456112349852, -0.09687694269960435, 0.3560469155447572), vec3(-0.6162389357956337, -0.1736563928951767, 0.48517687972888585), vec3(-0.021898300805670463, 0.03068927101986966, 0.19559247626236026), vec3(0.26331504452436516, -0.13559735196944822, 0.25299596654554035), vec3(0.6167342670318857, 0.41750610944713756, 0.6448073822912783), vec3(0.1753940118195829, -0.20213130975921798, 0.9204898130628167), vec3(0.2820387917110727, -0.44788781252287563, 0.7817867192802613), vec3(-0.7391288727882339, 0.3623279643428524, 0.45412526159340644), vec3(-0.14399209554443684, -0.035446672972391374, 0.09020918709321758), vec3(0.28161568830708383, -0.02098206193314542, 0.28410994800913847), vec3(0.04100183589278931, -0.006048106928610241, 0.17594960286791025), vec3(-0.18073236622615169, -0.2305084038559294, 0.4615988220433073), vec3(0.05838367533974036, -0.024280061764686868, 0.22605476422970316), vec3(-0.03198306226615036, 0.5244332774082906, 0.5975529571768734), vec3(-0.005083807561795603, -0.3631004291955189, 0.44722207213668336), vec3(-0.12265603793874147, 0.030372932384982513, 0.20581470356670753), vec3(0.3952290752201807, 0.4259267166361117, 0.2877977850634774), vec3(0.6588507801176655, 0.04683575446166606, 0.7470947875441164), vec3(0.40082748052061296, -0.14164913366372214, 0.5232564987820922), vec3(-0.12996835991964148, 0.14419701519124334, 0.20248328847448446), vec3(-0.5093553565066881, -0.39083125609533076, 0.6834139722191304), vec3(-0.14129667409953553, -0.009703274397608997, 0.0856894850006847), vec3(0.03679336673596488, 0.04617683944888174, 0.10073783503296188), vec3(0.6837127907799284, -0.2762806883429214, 0.4861032100196401), vec3(0.20602936147972908, 0.3037312333325108, 0.671710263136784), vec3(0.38582322225089777, -0.6079518580797617, 0.559839812372568), vec3(-0.12382506101434965, 0.07004936231956775, 0.05967944162036881), vec3(-0.17246205496111477, 0.036981045490130954, 0.35177667259584855), vec3(0.007801145106343863, -0.01594976548163025, 0.17907344892525934), vec3(0.04473280185408211, -0.09881854822943234, 0.7025086183046483), vec3(0.1970803816693997, -0.15057417615215843, 0.5737424630658308), vec3(0.4793385955491699, -0.12527941321334535, 0.6444127947703094), vec3(0.01166195359432947, 0.19047461524466228, 0.3454864531296855), vec3(0.3946273803424294, 0.2891425833687301, 0.22697944860892444), vec3(-0.7753333592835192, 0.11863401640523069, 0.48174778833266696), vec3(0.6639251055568153, -0.32713212574431555, 0.29010479614217966), vec3(-0.3628686214089046, 0.06536525884141625, 0.7772428781747683), vec3(0.37144479076084685, 0.08601414572661267, 0.8118245889032889), vec3(-0.05018146507987357, -0.1039810660502565, 0.07709622904541195), vec3(-0.16450770318795613, 0.35016274416265347, 0.5477372967109695), vec3(-0.008836387444071704, 0.040286399149093946, 0.06711715283366797), vec3(-0.023070229532913624, 0.009948113245398233, 0.05725441037345099), vec3(-0.017202396234134356, -0.08502112281227894, 0.07237261536017131), vec3(0.16716955985710463, 0.03475364600458599, 0.8085609050510496), vec3(-0.5391635256319689, 0.20214150088120733, 0.5929214932803119), vec3(0.008785110972263505, -0.06893046879624322, 0.039229492730397525), vec3(-0.0034597942961114097, -0.05982690191752543, 0.19730670086095523), vec3(-0.0064715948757551505, -0.049831210008110936, 0.14665416632247372), vec3(-0.3354261558720081, -0.5140832778976109, 0.24539246281224014), vec3(-0.2678938775330865, -0.19486540584071482, 0.2673932558180697), vec3(-0.0008497026353796802, 0.001472755661090056, 0.15937990836431312), vec3(-0.178705798117251, 0.31173981896384595, 0.8710334792140493), vec3(-0.5020081808065688, 0.0564641302294827, 0.2892788542727539), vec3(-0.002358965156842957, 0.01610562251398533, 0.23965116946515846), vec3(0.09968552704245577, -0.05127618276951725, 0.8526827176310501), vec3(-0.001736435811339284, -0.005579586786838018, 0.2573137157405497), vec3(0.01774779621532128, -0.2565834523567512, 0.63654576777086), vec3(0.08849344771411098, -0.13747192509114403, 0.2703785720454574), vec3(0.3453226009524484, -0.25500568854919753, 0.45299756671219116), vec3(0.018133101644715027, -0.03965593683648991, 0.058590673885655246), vec3(-0.5332909684872371, 0.4980346315140262, 0.33838616759026224), vec3(-0.4711544795813942, 0.03786371052688139, 0.2823605284729039), vec3(0.05291507658602189, 0.022784044764673557, 0.7579806776872017), vec3(0.008752013657897273, 0.12817846161606847, 0.4445471708833308), vec3(-0.4184552354968527, -0.46342088326825726, 0.4599770104545783), vec3(-0.08383757754677994, -0.26594527957127306, 0.24000918063473167), vec3(0.028761972080114682, 0.09611799877874297, 0.11419123362751998), vec3(0.11061585322399427, 0.201404955885906, 0.6563636260465804), vec3(0.0902631630705044, 0.08283288874356676, 0.8665859904223253), vec3(0.4192284335497342, -0.5315337900519417, 0.3897003677875571), vec3(-0.33231826697117534, 0.12333915553644786, 0.14035873417775613), vec3(0.0076204818651111695, 0.29974178009171965, 0.6891140715204409), vec3(0.615069727408017, -0.2946688184056548, 0.5212240861761406), vec3(0.0014197527565162592, 0.0010878032743618109, 0.0031160626282742024), vec3(-0.05563557894106705, 0.04024766460234303, 0.18968334265672973), vec3(-0.02743109532038141, 0.02869104057241221, 0.8742566996482153), vec3(0.002724103490613468, 0.004072488753180313, 0.05233502185690111), vec3(-0.0802747963515838, 0.11133493031590916, 0.25588483117669303), vec3(-0.031551960783882844, -0.004287324463855506, 0.046938792092250596), vec3(-0.011722125197305535, 0.33643850438580036, 0.5973069356709331), vec3(-0.026792899185131256, -0.02544530327978411, 0.7049032637300122), vec3(-0.16974246645906294, 0.09000901550912922, 0.9806074249848706), vec3(-0.5701940029294009, 0.3843833566421977, 0.252219449378637), vec3(0.06198150594426063, -0.1435765614993897, 0.7378393979216963) );
35: 
36: 
37: #ifdef Vertex
38: layout(location = 0) in vec2 DiffuseColorCoordinates;
39: layout(location = 1) in vec4 Positions;
40: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
41: layout(location = 1) out vec4 fs_Positions;
42: void main()
43: {
44:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
45:     gl_Position = Positions;
46:     fs_Positions = Positions;
47: }
48: 
49: #endif
50: 
51: 
52: 
53: #ifdef Fragment
54: 
55: vec3 SLEAardvarkRenderDemo_SSAO_project_3xKKw0NaNrmSOKnCCRYoyQ(vec3 vp)
56: {
57:     vec3 vp1 = vp;
58:     vp1.z = min(-0.01, vp1.z);
59:     vec4 pp = (vec4(vp1, 1.0) * ProjTrafo);
60:     return (pp.xyz / pp.w);
61: }
62: 
63: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
64: layout(location = 1) in vec4 fs_Positions;
65: layout(location = 0) out vec4 ColorsOut;
66: void main()
67: {
68:     vec2 ndc = (fs_Positions.xy / fs_Positions.w);
69:     vec4 pp0 = vec4(ndc.x, ndc.y, ((2.0 * texture(depth, fs_DiffuseColorCoordinates).x) - 1.0), 1.0);
70:     vec4 temp = (pp0 * ProjTrafoInv);
71:     vec3 z = normalize((vec4(normalize(texture(normal, fs_DiffuseColorCoordinates).xyz), 0.0) * ViewTrafo).xyz);
72:     vec3 y = normalize(cross(z, normalize(texture(random, pp0.xy).xyz)));
73:     float occlusion = 0.0;
74:     int last = (Samples - 1);
75:     for(int si = 0; (si <= last); si++)
76:     {
77:         vec3 dir = (_constant0[si] * Radius);
78:         float temp1 = (float(si) / float((Samples - 1)));
79:         vec3 dirscaled = (dir * mix(1.0, (temp1 * temp1), 0.1));
80:         vec3 p = ((((temp.xyz / temp.w) + (normalize(cross(y, z)) * dirscaled.x)) + (y * dirscaled.y)) + (z * dirscaled.z));
81:         vec3 pp = (0.5 * (SLEAardvarkRenderDemo_SSAO_project_3xKKw0NaNrmSOKnCCRYoyQ(p) + vec3(1.0, 1.0, 1.0)));
82:         if((texture(depthCmp, vec3(pp.xy, (0.5 * (SLEAardvarkRenderDemo_SSAO_project_3xKKw0NaNrmSOKnCCRYoyQ((p * (1.0 - (Threshold / (-p.z))))) + vec3(1.0, 1.0, 1.0))).z)) < 0.5))
83:         {
84:             occlusion = (occlusion + ((texture(depth, pp.xy).x > pp.z) ? 0.0 : 1.0));
85:         }
86:     }
87:     float occlusion1 = min(1.0, ((occlusion / float(Samples)) * OcclusionStrength));
88:     float ambient = (1.0 - occlusion1);
89:     ColorsOut = vec4(ambient, ambient, ambient, 1.0);
90: }
91: 
92: #endif

 2: texture created
 2: [GL] RenderObjects: +1/-0 (248ms)
 2: using optimized native program
 2: [GL] RenderObjects: +1/-0 (298ms)
 2: using optimized native program
 2: texture created
 2: result created
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 2: [GL] RenderObjects: +1/-0 (23ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 2: [GL] RenderObjects: +1/-0 (15ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 2: [GL] RenderObjects: +1/-0 (15ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 2: [GL] RenderObjects: +1/-0 (16ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 2: [GL] RenderObjects: +1/-0 (16ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 2: [GL] RenderObjects: +1/-0 (15ms)
 2: using optimized native program
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: texture created
 2: result created
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveFramebufferCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (78ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (40ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (41ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (41ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (49ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (45ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (41ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (44ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (39ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (39ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (39ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (44ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (39ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (38ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (38ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (37ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (37ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (46ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (41ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (39ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (49ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (47ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (50ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (48ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (46ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (45ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (45ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (43ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (41ms)
 2: using optimized native program
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 2: [GL] RenderObjects: +1/-0 (42ms)
 2: using optimized native program
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: texture created
 2: result created
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform PerView
 16: {
 17:     mat4x4 ViewProjTrafo;
 18: };
 19: 
 20: 
 21: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 22: {
 23:     uint bits = ((bitss << 16) | (bitss >> 16));
 24:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 25:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 26:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 27:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 28:     return (float(bits) * 2.3283064365386963E-10);
 29: }
 30: 
 31: 
 32: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 33: {
 34:     float a = (roughness * roughness);
 35:     float phi = (6.283185307179586 * xi.x);
 36:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 37:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 38:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 39:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 40:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 41: }
 42: 
 43: 
 44: float helper(float roughness)
 45: {
 46:     float r = (roughness + 1.0);
 47:     return ((r * r) / 8.0);
 48: }
 49: 
 50: 
 51: float SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(bool ilb, float nDotV, float roughness)
 52: {
 53:     float k = (ilb ? ((roughness * roughness) / 2.0) : helper(roughness));
 54:     return (nDotV / ((nDotV * (1.0 - k)) + k));
 55: }
 56: 
 57: 
 58: float SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(bool ilb, vec3 n, vec3 v, vec3 l, float roughness)
 59: {
 60:     return (SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, l)), roughness) * SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, v)), roughness));
 61: }
 62: 
 63: 
 64: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 65: {
 66:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 67: }
 68: 
 69: 
 70: vec2 SLEAardvarkRenderDemo_PBR_integrateBRDF_48I3CDwiqL41Z6uAXSOYfQ(float nDotV, float roughness)
 71: {
 72:     vec3 v = vec3(sqrt((1.0 - (nDotV * nDotV))), 0.0, nDotV);
 73:     float a = 0.0;
 74:     float b = 0.0;
 75:     for(int i = 0; (i < 1025); i++)
 76:     {
 77:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), vec3(0.0, 0.0, 1.0), roughness);
 78:         vec3 l = normalize(((2.0 * dot(v, h)) * h));
 79:         float vDotH = max(0.0, dot(v, h));
 80:         if((max(l.z, 0.0) > 0.0))
 81:         {
 82:             float gVis = ((SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(true, vec3(0.0, 0.0, 1.0), v, l, roughness) * vDotH) / (max(h.z, 0.0) * nDotV));
 83:             float fc = pow((1.0 - vDotH), 5.0);
 84:             a = (a + ((1.0 - fc) * gVis));
 85:             b = (b + (fc * gVis));
 86:         }
 87:     }
 88:     return vec2((a / 1024.0), (b / 1024.0));
 89: }
 90: 
 91: 
 92: 
 93: #ifdef Vertex
 94: 
 95: layout(location = 0) in vec2 DiffuseColorCoordinates;
 96: layout(location = 1) in vec4 Positions;
 97: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
 98: void main()
 99: {
100:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
101:     gl_Position = ((Positions * ModelTrafo) * ViewProjTrafo);
102: }
103: 
104: #endif
105: 
106: 
107: 
108: #ifdef Fragment
109: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
110: layout(location = 0) out vec4 ColorsOut;
111: void main()
112: {
113:     ColorsOut = vec4(vec3(SLEAardvarkRenderDemo_PBR_integrateBRDF_48I3CDwiqL41Z6uAXSOYfQ(fs_DiffuseColorCoordinates.x, fs_DiffuseColorCoordinates.y), 0.0), 1.0);
114: }
115: 
116: #endif

 2: [GL] RenderObjects: +1/-0 (128ms)
 2: using optimized native program
 2: [GL] RenderObjects: +2/-0 (4344ms)
 2: using optimized native program
 2: [GL] RenderObjects: +1/-0 (5357ms)
 2: using optimized native program
 2: probing paths for libc
 2:   /Users/atti/proj/learningAardvark/bin/Debug/netcoreapp3.1
 2:   /var/folders/zr/sgd4hkx94qj0xbp9mxw3wjc00000gp/T/aardvark-native/Aardvark.Service-6c07790d-9ae8-a533-bcc3-f89762a0781f-64
 2: [Introspection] loaded native library libc from libc.dylib
 2: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: struct tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d
  8: {
  9:     bool Item0;
 10:     vec3 Item1;
 11:     vec3 Item2;
 12: };
 13: 
 14: struct SLEAardvarkRenderDemo_SLEUniform_Light
 15: {
 16:     int lightType;
 17:     vec4 lightPosition;
 18:     vec3 color;
 19:     float attenuationQad;
 20:     float attenuationLinear;
 21:     bool castsShadow;
 22: };
 23: 
 24: layout(std140)
 25: uniform PerView
 26: {
 27:     vec3 CameraLocation;
 28: };
 29: 
 30: 
 31: layout(std140)
 32: uniform Global
 33: {
 34:     SLEAardvarkRenderDemo_SLEUniform_Light Light;
 35: };
 36: 
 37: 
 38: uniform sampler2D color;
 39: 
 40: uniform sampler2D materialProperties;
 41: 
 42: uniform sampler2D normal;
 43: 
 44: uniform sampler2D wPos;
 45: 
 46: float SLEAardvarkRenderDemo_PBR_DistributionGGX_9rKdY223uBS_NUz8TxOtw(vec3 n, vec3 h, float roughness)
 47: {
 48:     float a = (roughness * roughness);
 49:     float a2 = (a * a);
 50:     float nDotH = max(0.0, dot(n, h));
 51:     float deno = (((nDotH * nDotH) * (a2 - 1.0)) + 1.0);
 52:     return (a2 / ((3.141592653589793 * deno) * deno));
 53: }
 54: 
 55: 
 56: vec3 SLEAardvarkRenderDemo_PBR_fresnelSchlick_p2rPA4e4MFUMqGJ0C14Tng(vec3 f0, float cosTheta)
 57: {
 58:     return (f0 + ((1.0 - f0) * pow((1.0 - cosTheta), 5.0)));
 59: }
 60: 
 61: 
 62: tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(bool item0, vec3 item1, vec3 item2)
 63: {
 64:     tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d res;
 65:     res.Item0 = item0;
 66:     res.Item1 = item1;
 67:     res.Item2 = item2;
 68:     return res;
 69: }
 70: 
 71: 
 72: float helper(float roughness)
 73: {
 74:     float r = (roughness + 1.0);
 75:     return ((r * r) / 8.0);
 76: }
 77: 
 78: 
 79: float SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(bool ilb, float nDotV, float roughness)
 80: {
 81:     float k = (ilb ? ((roughness * roughness) / 2.0) : helper(roughness));
 82:     return (nDotV / ((nDotV * (1.0 - k)) + k));
 83: }
 84: 
 85: 
 86: float SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(bool ilb, vec3 n, vec3 v, vec3 l, float roughness)
 87: {
 88:     return (SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, l)), roughness) * SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, v)), roughness));
 89: }
 90: 
 91: 
 92: tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d SLEAardvarkRenderDemo_PBR_getLightParams_kyLcjVsSKKfWCNmsxKXq1A(SLEAardvarkRenderDemo_SLEUniform_Light light, vec3 wPos)
 93: {
 94:     if((light.lightType == 0))
 95:     {
 96:         return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
 97:     }
 98:     else
 99:     {
100:         if((light.lightType == 1))
101:         {
102:             return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(true, normalize((-light.lightPosition.xyz)), light.color);
103:         }
104:         else
105:         {
106:             if((light.lightType == 2))
107:             {
108:                 float dist = distance(light.lightPosition.xyz, wPos);
109:                 return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(true, normalize((light.lightPosition.xyz - wPos)), (light.color * (1.0 / ((1.0 + (light.attenuationLinear * dist)) + ((light.attenuationQad * dist) * dist)))));
110:             }
111:             else
112:             {
113:                 return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
114:             }
115:         }
116:     }
117: }
118: 
119: 
120: vec3 SLEAardvarkRenderDemo_PBR_pbrDirect_sus2XA3pL9i43DpwtvodNA(vec3 f0, float roughness, float metallic, vec3 albedo, vec4 wPos, vec3 v, vec3 n, float nDotV, SLEAardvarkRenderDemo_SLEUniform_Light light)
121: {
122:     tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d patternInput = SLEAardvarkRenderDemo_PBR_getLightParams_kyLcjVsSKKfWCNmsxKXq1A(light, wPos.xyz);
123:     if(patternInput.Item0)
124:     {
125:         vec3 h = normalize((v + patternInput.Item1));
126:         vec3 kS = SLEAardvarkRenderDemo_PBR_fresnelSchlick_p2rPA4e4MFUMqGJ0C14Tng(f0, max(0.0, dot(h, v)));
127:         float nDotL = max(0.0, dot(n, patternInput.Item1));
128:         return (((((((1.0 - metallic) * (vec3(1.0, 1.0, 1.0) - kS)) * albedo) / 3.141592653589793) + (((SLEAardvarkRenderDemo_PBR_DistributionGGX_9rKdY223uBS_NUz8TxOtw(n, h, roughness) * SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(false, n, v, patternInput.Item1, roughness)) * kS) / max(0.001, ((4.0 * nDotV) * nDotL)))) * patternInput.Item2) * nDotL);
129:     }
130:     else
131:     {
132:         return vec3(0.0, 0.0, 0.0);
133:     }
134: }
135: 
136: 
137: 
138: #ifdef Vertex
139: layout(location = 0) in vec2 DiffuseColorCoordinates;
140: layout(location = 1) in vec4 Positions;
141: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
142: void main()
143: {
144:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
145:     gl_Position = Positions;
146: }
147: 
148: #endif
149: 
150: 
151: 
152: #ifdef Fragment
153: 
154: vec3 SLEAardvarkRenderDemo_PBR_pBRLightning_2wyHfJ4HvFqeUQ4k4HppZA(float metallic, float roughness, vec3 albedo, vec3 n, vec4 wPos)
155: {
156:     vec3 v = normalize((CameraLocation - wPos.xyz));
157:     return SLEAardvarkRenderDemo_PBR_pbrDirect_sus2XA3pL9i43DpwtvodNA(mix(vec3(0.04, 0.04, 0.04), albedo, metallic), roughness, metallic, albedo, wPos, v, n, max(0.0, dot(n, v)), Light);
158: }
159: 
160: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
161: layout(location = 0) out vec4 ColorsOut;
162: void main()
163: {
164:     vec2 m = texture(materialProperties, fs_DiffuseColorCoordinates).xy;
165:     ColorsOut = vec4(((m.x < 0.0) ? vec3(0.0, 0.0, 0.0) : SLEAardvarkRenderDemo_PBR_pBRLightning_2wyHfJ4HvFqeUQ4k4HppZA(m.x, m.y, texture(color, fs_DiffuseColorCoordinates).xyz, normalize(texture(normal, fs_DiffuseColorCoordinates).xyz), texture(wPos, fs_DiffuseColorCoordinates))), 1.0);
166: }
167: 
168: #endif

 2: [GL] RenderObjects: +1/-1 (127ms)
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 2: WARNING: AdaptiveRenderingResultCube.compute
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveRenderingResultCube.compute1
 2: WARNING: AdaptiveOutputCubeTexture.compute
 3: WARNING: load
 2: WARNING: load
 2: [GL] RenderObjects: +393/-0 (9965ms)
 2: WARNING: load
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: 
22: #ifdef Vertex
23: 
24: layout(location = 0) in vec4 Positions;
25: void main()
26: {
27:     gl_Position = ((Positions * ModelTrafo) * ViewProjTrafo);
28: }
29: 
30: #endif
31: 
32: 
33: 
34: #ifdef Fragment
35: void main()
36: {
37: 
38: }
39: 
40: #endif

 2: [GL] RenderObjects: +453/-0 (52ms)
 2: using optimized native program
 2: [GL] RenderObjects: +1/-1 (2104ms)
 2: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: 
22: #ifdef Vertex
23: 
24: layout(location = 0) in vec4 Positions;
25: void main()
26: {
27:     gl_Position = ((Positions * ModelTrafo) * ViewProjTrafo);
28: }
29: 
30: #endif
31: 
32: 
33: 
34: #ifdef Fragment
35: void main()
36: {
37: 
38: }
39: 
40: #endif

 2: [GL] RenderObjects: +453/-0 (110ms)
 2: using optimized native program
 2: [GL] RenderObjects: +1/-1 (141ms)
 4: [Client] 1: stopped
 4: texture deleted
 4: result deleted
 4: [Scene] n7: destroyed
 5: [Server] created client for (e46db500-2e71-1d48-364e-cf510a748cff/n1652), mapping enabled
 5: [Client] 2: running n1652
 6: [Scene] n7: created
 6: texture created
 6: result created
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform Global
 9: {
10:     float AmbientIntensity;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     vec3 CameraLocation;
18: };
19: 
20: 
21: uniform sampler2D ambientOcc;
22: 
23: uniform sampler2D color;
24: 
25: uniform samplerCube diffuseIrradianceSampler;
26: 
27: uniform sampler2D materialProperties;
28: 
29: uniform sampler2D normal;
30: 
31: uniform samplerCube prefilteredSpecColorSampler;
32: 
33: uniform sampler2D samplerBRDFLtu;
34: 
35: uniform sampler2D wPos;
36: 
37: vec3 SLEAardvarkRenderDemo_PBR_fresnelSchlickRoughness_g0d3vPX7Vq1a7HjB2Xh00Q(vec3 f0, float roughness, float cosTheta)
38: {
39:     return (f0 + ((max(vec3((1.0 - roughness)), f0) - f0) * pow((1.0 - cosTheta), 5.0)));
40: }
41: 
42: 
43: 
44: #ifdef Vertex
45: layout(location = 0) in vec2 DiffuseColorCoordinates;
46: layout(location = 1) in vec4 Positions;
47: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
48: void main()
49: {
50:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
51:     gl_Position = Positions;
52: }
53: 
54: #endif
55: 
56: 
57: 
58: #ifdef Fragment
59: 
60: vec3 SLEAardvarkRenderDemo_PBR_pBRAbientLight_m9Eo9Sk00tn05l3E8NfGpkQ(vec3 f0, float roughness, float metallic, vec3 albedo, vec3 n, vec3 r, float nDotV)
61: {
62:     vec3 kSA = SLEAardvarkRenderDemo_PBR_fresnelSchlickRoughness_g0d3vPX7Vq1a7HjB2Xh00Q(f0, roughness, nDotV);
63:     vec2 brdf = texture(samplerBRDFLtu, vec2(nDotV, roughness)).xy;
64:     return (((((1.0 - kSA) * (1.0 - metallic)) * (texture(diffuseIrradianceSampler, n).xyz * albedo)) + (textureLod(prefilteredSpecColorSampler, r, (roughness * 4.0)).xyz * ((kSA * brdf.x) + brdf.y))) * AmbientIntensity);
65: }
66: 
67: vec3 SLEAardvarkRenderDemo_PBR_pBRAbient_I7XNvXwUDUTYX4q8DPoVvg(float metallic, float roughness, vec3 albedo, vec3 n, vec4 wPos)
68: {
69:     vec3 v = normalize((CameraLocation - wPos.xyz));
70:     return SLEAardvarkRenderDemo_PBR_pBRAbientLight_m9Eo9Sk00tn05l3E8NfGpkQ(mix(vec3(0.04, 0.04, 0.04), albedo, metallic), roughness, metallic, albedo, n, reflect(n, (-v)), max(0.0, dot(n, v)));
71: }
72: 
73: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
74: layout(location = 0) out vec4 ColorsOut;
75: void main()
76: {
77:     vec2 m = texture(materialProperties, fs_DiffuseColorCoordinates).xy;
78:     ColorsOut = (vec4((((m.x < 0.0) ? vec3(0.0, 0.0, 0.0) : SLEAardvarkRenderDemo_PBR_pBRAbient_I7XNvXwUDUTYX4q8DPoVvg(m.x, m.y, texture(color, fs_DiffuseColorCoordinates).xyz, normalize(texture(normal, fs_DiffuseColorCoordinates).xyz), texture(wPos, fs_DiffuseColorCoordinates))) * texture(ambientOcc, fs_DiffuseColorCoordinates).x), 1.0) + vec4(((m.x < 0.0) ? texture(color, fs_DiffuseColorCoordinates).xyz : vec3(0.0, 0.0, 0.0)), 1.0));
79: }
80: 
81: #endif

 6: texture created
 6: result created
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerView
 9: {
10:     mat4x4 ProjTrafoInv;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float Sharpness;
18:     float Sigma;
19: };
20: 
21: 
22: uniform sampler2D ambientOcc;
23: 
24: uniform sampler2D depth;
25: 
26: 
27: #ifdef Vertex
28: layout(location = 0) in vec4 Positions;
29: layout(location = 0) out vec4 fs_Positions;
30: void main()
31: {
32:     gl_Position = Positions;
33:     fs_Positions = Positions;
34: }
35: 
36: #endif
37: 
38: 
39: 
40: #ifdef Fragment
41: 
42: float SLEAardvarkRenderDemo_SSAO_getLinearDepth_eVClZBiYzTbRATT9v005fKQ(vec2 ndc)
43: {
44:     vec4 temp = (vec4(ndc.x, ndc.y, ((2.0 * texture(depth, (0.5 * (ndc + vec2(1.0, 1.0))), 0.0).x) - 1.0), 1.0) * ProjTrafoInv);
45:     return (temp.z / temp.w);
46: }
47: 
48: vec4 SLEAardvarkRenderDemo_SSAO_getAmbient_3JUPR9hvRHsFhqM6Q0oeXQ(vec2 ndc)
49: {
50:     return textureLod(ambientOcc, (0.5 * (ndc + vec2(1.0, 1.0))), 0.0);
51: }
52: 
53: vec4 SLEAardvarkRenderDemo_SSAO_getAmbient_w008gtWmX_c3gH04aLixjAQ(vec2 ndc)
54: {
55:     return textureLod(ambientOcc, (0.5 * (ndc + vec2(1.0, 1.0))), 0.0);
56: }
57: 
58: layout(location = 0) in vec4 fs_Positions;
59: layout(location = 0) out vec4 ColorsOut;
60: void main()
61: {
62:     vec2 ndc = (fs_Positions.xy / fs_Positions.w);
63:     if((Sigma <= 0.0))
64:     {
65:         ColorsOut = SLEAardvarkRenderDemo_SSAO_getAmbient_w008gtWmX_c3gH04aLixjAQ(ndc);
66:     }
67:     else
68:     {
69:         vec4 sum = vec4(0.0, 0.0, 0.0, 0.0);
70:         float wsum = 0.0;
71:         for(int x = -4; (x < 5); x++)
72:         {
73:             for(int y = -4; (y < 5); y++)
74:             {
75:                 vec2 pos = (ndc + (vec2(x, y) * (2.0 / vec2(textureSize(ambientOcc, 0)))));
76:                 float deltaDepth = (SLEAardvarkRenderDemo_SSAO_getLinearDepth_eVClZBiYzTbRATT9v005fKQ(pos) - SLEAardvarkRenderDemo_SSAO_getLinearDepth_eVClZBiYzTbRATT9v005fKQ(ndc));
77:                 float w = (exp(((-dot(vec2(x, y), vec2(x, y))) / (Sigma * Sigma))) * exp((((-deltaDepth) * deltaDepth) * (Sharpness * Sharpness))));
78:                 sum = (sum + (w * SLEAardvarkRenderDemo_SSAO_getAmbient_3JUPR9hvRHsFhqM6Q0oeXQ(pos)));
79:                 wsum = (wsum + w);
80:             }
81:         }
82:         ColorsOut = (sum / wsum);
83:     }
84: }
85: 
86: #endif

 6: texture created
 6: result created
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform Global
 9: {
10:     float OcclusionStrength;
11:     float Radius;
12:     int Samples;
13:     float Threshold;
14: };
15: 
16: 
17: layout(std140)
18: uniform PerView
19: {
20:     mat4x4 ProjTrafo;
21:     mat4x4 ProjTrafoInv;
22:     mat4x4 ViewTrafo;
23: };
24: 
25: 
26: uniform sampler2D depth;
27: 
28: uniform sampler2DShadow depthCmp;
29: 
30: uniform sampler2D normal;
31: 
32: uniform sampler2D random;
33: 
34: const vec3 _constant0[] = vec3[]( vec3(-0.06559896944229449, -0.006665463975887605, 0.12828401494513642), vec3(0.15180361733584158, -0.16958289435577792, 0.5175607771105494), vec3(0.15084913009229584, 0.16113333130774526, 0.24123495025306846), vec3(0.11002771798142598, 0.02169277595899419, 0.7757497857628597), vec3(0.534016572020935, 0.3450159451999019, 0.4246773699591801), vec3(-0.6720795090443907, 0.3179263621696393, 0.6074348656465207), vec3(-0.040484839086289186, -0.04017690661930334, 0.05644516719206713), vec3(-0.04407715529013064, -0.2929725222045761, 0.27367037395269667), vec3(0.06258079747287124, 0.35786508862173366, 0.5799486885001497), vec3(-0.018021784426118653, -0.003208134354683993, 0.150208537556467), vec3(-0.10809131000043891, -0.09768017805392418, 0.9044072235554865), vec3(-0.2301991227237496, -0.08089188254177838, 0.19623671441975396), vec3(-0.4428625115386026, 0.34626545827156174, 0.7757667766538732), vec3(-0.7180971410432698, 0.14254660433279734, 0.35271900289046304), vec3(-0.025798491866901113, -0.4590916449176218, 0.6909364792814792), vec3(-0.20817760766014376, -0.1957858000344675, 0.19999866665050947), vec3(-0.16363044278979216, 0.257289089425637, 0.250465601894093), vec3(0.023003450961799787, -0.010547789847728398, 0.6637768439514907), vec3(0.21438147419651382, -0.38089157621991165, 0.33029011766452954), vec3(-0.0027994291316385546, -0.008451490977604193, 0.12700715925247502), vec3(-0.08811261925922526, 0.041977467922072194, 0.21993162687467624), vec3(0.028372028868421852, 0.12805772860377632, 0.7557797579377379), vec3(-0.6534953698220805, 0.09140248525542184, 0.3651222064412256), vec3(0.12360918105526021, 0.04635674802896133, 0.6163084927786507), vec3(-0.09115560980441921, 0.2162122217632951, 0.826756721856537), vec3(0.16496918555183968, -0.30808119736793355, 0.2610503113745059), vec3(-0.15011274380318015, -0.14007062535271286, 0.11895987382815429), vec3(-0.18003643786591772, 0.024629609134565765, 0.3569846731386878), vec3(0.04624058217166823, -0.07838118420522254, 0.547196494887292), vec3(0.05636713726473161, -0.020402472283205852, 0.0638627659471579), vec3(0.08282817849422183, 0.09726150158763179, 0.9215070070793815), vec3(-0.4508483674168564, 0.4427201822690842, 0.6836323056847233), vec3(0.2688000791036526, 0.60617131083757, 0.6616389347393291), vec3(-0.6237452725798363, 0.5509027482434856, 0.4220482695559035), vec3(-0.045510778561744604, -0.2069587343867144, 0.18646995912533063), vec3(0.2501426857470049, -0.3745932767366562, 0.7030064493408852), vec3(0.02932253436371137, -0.519906815433537, 0.8033047821673629), vec3(-0.09334041522099616, -0.16983034494876756, 0.5547385918642396), vec3(0.11363499913416977, -0.0667898283661671, 0.23858290033622093), vec3(-0.002516876149514778, 0.11679132964739052, 0.15750096793075094), vec3(-0.33926497737267114, 0.09586811206181176, 0.9316894282853393), vec3(-0.4403104906355805, -0.34032906439048904, 0.7651173250055936), vec3(-0.3588536563954914, -0.5097749647667114, 0.35749956437866587), vec3(0.10350119619659046, 0.1786405593482427, 0.30725298990239086), vec3(0.012258676149231158, 0.35366380353252724, 0.44916167157511266), vec3(0.23436700001019986, 0.6688851246807929, 0.6211492404068393), vec3(0.017389525964216817, -0.04288747958029744, 0.4597168432178227), vec3(0.26667719014569113, -0.14758011692753062, 0.7485785821598725), vec3(0.1399876610419344, -0.030904860757974495, 0.15741632043567622), vec3(0.0604054429963994, -0.016697403231059536, 0.0385722425583782), vec3(-0.14381472968270062, 0.011608279808396573, 0.7500174288386678), vec3(-0.4900510556667512, 0.13515996154245752, 0.5395962005447815), vec3(-0.14254697294173127, 0.12947061055102294, 0.4068592111508572), vec3(0.1242467325898867, 0.0012596396685707434, 0.676220657622361), vec3(0.0896775441402037, 0.21035916973629787, 0.9017945232798275), vec3(-0.1825290837527474, 0.03486968114964663, 0.3282032971416918), vec3(0.29431440088180766, -0.2713321992727064, 0.7056171209524178), vec3(0.31715429959631564, 0.5053649841642748, 0.3597122491573205), vec3(-0.8021158242313159, -0.04049065297590463, 0.45770670304891714), vec3(0.12229855621902672, -0.03280497368461393, 0.30296302262637), vec3(-0.6377211782286274, 0.09144196064275356, 0.3276790889405613), vec3(-0.07698419460212129, -0.11649390199855056, 0.6651753475050644), vec3(-0.15158986854204023, 0.001256210876428272, 0.8349626207172997), vec3(-0.24658867920712982, -0.3633472331329299, 0.4040869761882164), vec3(-0.08776769887468555, -0.029251124009462896, 0.20070394599118685), vec3(-0.13371617697012375, 0.3397850860090339, 0.9149713422090695), vec3(-0.17750404636421854, 0.05029623155243952, 0.32807285599289276), vec3(0.008737227347127724, 0.0019625822260947367, 0.023276455433940007), vec3(0.2625545771167058, -0.41996222557475693, 0.1897359185132495), vec3(0.23343826444748228, 0.25515895723403, 0.9329908085294042), vec3(0.005305943008249557, -0.006586724751238489, 0.3914001764102311), vec3(-0.012163690274150419, 0.03875064557334698, 0.8059592498829822), vec3(0.28202909294139333, 0.14645749880315484, 0.2289725103051772), vec3(0.06412695915672875, -0.1475892065945037, 0.31277854294713514), vec3(0.010974384447315428, -0.005915268858946307, 0.13056402301968284), vec3(0.013361942207250758, -0.03472680181103488, 0.2921575368147086), vec3(-0.020510757582397218, -0.026906422696145783, 0.034653604576724506), vec3(-0.15681801156279634, 0.19753623638433723, 0.28950938969457457), vec3(-0.020138159770034837, 0.00018998862887719257, 0.05489458279525079), vec3(0.19004122020679193, 0.17795983028663226, 0.8792482095641012), vec3(-0.10109325904962956, -0.36263880620523314, 0.8984836747550884), vec3(-0.2984798518905089, -0.20988428912366078, 0.22568083657990326), vec3(0.028455025358938096, -0.02247477134482634, 0.18412327201154347), vec3(0.25147552865154305, -0.05514936069295587, 0.4064451468695125), vec3(-0.21337435173911554, 0.18290320195349358, 0.16086481839712893), vec3(0.11245574106727216, 0.0019145447392398332, 0.15186902104498998), vec3(-0.04462432173006095, -0.34729577220892954, 0.3294799488432878), vec3(-0.12969851798436818, 0.028045754869075894, 0.210918724883686), vec3(-0.001512763865813807, -0.001131016727174999, 0.0020177830755977), vec3(0.5837155153043337, 0.38675628684583874, 0.5735082938776457), vec3(-0.003717363087449983, 0.0065871217399469, 0.022433254946194206), vec3(0.004944735865217994, -0.14235884036901544, 0.21826306410968904), vec3(-0.1585667283593114, -0.046145255539924795, 0.6423182310828844), vec3(-0.4081817252236264, -0.6849131331314819, 0.5057865464988416), vec3(0.22781760206895219, 0.09438611520723085, 0.4039912085336231), vec3(0.06347239314406723, -0.18687124878432937, 0.24741642688709065), vec3(0.05792023361488842, -0.06446944190781682, 0.044635601016451344), vec3(-0.06388862674653872, -0.03714458210384902, 0.09693616006061036), vec3(-0.07051379958010033, 0.03868108308286403, 0.12563746025800862), vec3(0.316834480394574, 0.4225891926377689, 0.2553834429468047), vec3(0.0857732067320832, -0.22057458989147166, 0.5141826529416604), vec3(0.03261167702309757, 0.00035128399754080634, 0.43588235966992017), vec3(0.08490125400166253, 0.043401166969200836, 0.26099682738135016), vec3(-0.14247043106157317, 0.14422730120734567, 0.07985100205809172), vec3(0.3024343725406683, 0.5259098071199231, 0.31178543701078476), vec3(0.8390697403290729, -0.08240190712872478, 0.4523427355172086), vec3(0.05537467547041988, 0.15282791186549294, 0.3095695515902703), vec3(0.04151014981668469, -0.028644439181746823, 0.08447332330569471), vec3(-0.0763027284591415, -0.03546253856008867, 0.5499844954682145), vec3(-0.10984541145081422, 0.46057702229975844, 0.4243453213442136), vec3(-0.056962475613080786, 0.001899979465507834, 0.32375167525586585), vec3(-0.31456371050294446, 0.2296138955919232, 0.1758025425104527), vec3(0.31249631696156827, 0.11938203146461439, 0.5435189134236025), vec3(-0.0035403531606330294, -0.005228340378639632, 0.0038957928641258446), vec3(0.27808598511877175, 0.16194402840717337, 0.14796948438298765), vec3(0.04713013338244762, 0.01194405163308899, 0.28969925370322014), vec3(-0.10293156951826692, 0.020818939645930564, 0.48067544186290356), vec3(0.29430996552295985, -0.1740811978424188, 0.13463409003921717), vec3(-0.018577202281162514, 0.20390939958894208, 0.1804652698791738), vec3(-0.007969942913708436, 0.005939546443697243, 0.030435864113796503), vec3(0.18462401745553056, -0.3262517815885017, 0.33740434085618115), vec3(-0.014204826584358711, -0.02120705277985579, 0.12461376335044168), vec3(-0.019487409672529394, 0.0044654098151262235, 0.009594973426495653), vec3(-0.21087973755503353, 0.266830180388843, 0.5246899242063638), vec3(0.16895804228492134, -0.007897999763163105, 0.9565093810626383), vec3(0.045096825045866484, -0.010403509063087997, 0.12240162476034464), vec3(0.033135823715233596, 0.06907546516793822, 0.12166103407213792), vec3(-0.2874435836486636, 0.1524704837946056, 0.307183564003385), vec3(0.06474658985580893, -0.01950504066708937, 0.8758335614512), vec3(0.5622588599019617, 0.010777507121877434, 0.5894372332931928), vec3(-0.0819740027607074, -0.08888400899143581, 0.15556839638994582), vec3(0.20611285840251772, -0.16057451386619426, 0.8889340257816882), vec3(0.1264729835702787, -0.15757855896110276, 0.11957970582404409), vec3(-0.009215267949472356, 0.005495839269541068, 0.47167613609641557), vec3(-0.31513821513558404, 0.03825761876002393, 0.14963844984773064), vec3(0.2108481910624533, 0.42095806651983286, 0.25841161833513526), vec3(-0.0007951136176954768, -0.005275026586089641, 0.1510746092928404), vec3(0.4989669775158401, -0.6377844165433016, 0.5335904174266626), vec3(-0.22478578888411646, 0.019025256563398374, 0.7665178923284648), vec3(-0.06106871765232939, 0.009871162459844561, 0.3617823403968084), vec3(0.15508993909312088, 0.10560829935411119, 0.8180891470309997), vec3(0.18819361484835972, -0.2938314251129979, 0.15647309034389054), vec3(0.536024104115353, -0.10562945269206961, 0.4260275647024455), vec3(0.0035650198515204115, -0.0009803689882218014, 0.3669259823822735), vec3(0.003983266404645585, -0.17232975423034094, 0.549995639482045), vec3(0.1434337715005123, 0.022961804503895813, 0.5784200150009081), vec3(-0.18188408482434115, -0.47099336960295357, 0.36398685760857336), vec3(-0.15951824443109122, -0.16345093057221338, 0.6147333664144027), vec3(0.07448716991070316, -0.2812516956019066, 0.5132961094544345), vec3(-0.043537732805399194, 0.11472030266511561, 0.1310867583117748), vec3(-0.3305432349537919, -0.010487247837302822, 0.7552410816155056), vec3(0.05991802402516682, -0.0037860647351200933, 0.7275222586005394), vec3(0.09024633033835192, -0.0188888906459984, 0.8439401348111126), vec3(-0.019325621142787297, -0.009049148269328563, 0.11519744386631833), vec3(-0.0444655456057965, -0.03419224616624344, 0.060258703875488005), vec3(0.14416572506644446, 0.30553227013937506, 0.2800718699870137), vec3(-0.3066655128175632, -0.1907864042426101, 0.20425376934475253), vec3(-0.33345829677530525, -0.06030142129450858, 0.55771773579483), vec3(-0.06983437811497491, -0.21553766536631888, 0.09720291751424025), vec3(-0.007182729153875881, 0.07620624215127716, 0.5458987280913025), vec3(0.29984269491863985, -0.24480210793589954, 0.7149530594530462), vec3(-0.023663882513462704, 0.2513807301745953, 0.8661246955237777), vec3(0.16517746739463066, -0.12015445752062982, 0.08157494037028766), vec3(0.2762718442604975, 0.6222491087636804, 0.2943105271915741), vec3(-0.22786600978641827, 0.1613204578575872, 0.3385070508443217), vec3(0.0314580915491809, 0.0034968379014741705, 0.40094592840486176), vec3(0.14943200654502878, -0.07431750321085176, 0.0959423813064459), vec3(-0.08879983516406902, -0.09891665476599497, 0.10012374621489432), vec3(0.18151186751617276, 0.5000346758457686, 0.3846660482269718), vec3(0.7088330249419413, -0.11909056702058328, 0.3886781004029911), vec3(0.054707289390583946, 0.10558766551961585, 0.0786639108985909), vec3(-0.07324116511516357, 0.05050636477377901, 0.5146086125557388), vec3(0.1885926007585777, 0.08696086014953724, 0.5291726129549558), vec3(-0.5824513601224878, -0.49945638112755536, 0.48160829039447073), vec3(0.0010629373079643803, 0.04202973610211807, 0.18804449447777977), vec3(-0.08751974465615028, -0.056340367206022306, 0.06352268811469222), vec3(0.05611643629313207, 0.08498955395402516, 0.4222884784751032), vec3(-0.012449689523421107, -0.07797659940787195, 0.6504555800600719), vec3(0.03504857198732858, 0.017276637955160927, 0.029397796844358892), vec3(0.1740119577251437, 0.3050110875012179, 0.13148890719827644), vec3(0.28887487070772794, -0.19480400927738462, 0.3702918398291089), vec3(-0.00030277959779536083, -0.023736813744431567, 0.4874065871542727), vec3(-0.09921235223123925, -0.06828213112080689, 0.848953040636554), vec3(0.14385646320598847, -0.5244843833723135, 0.43893249448259075), vec3(0.0960630961017617, 0.7951080817374394, 0.5822909724016225), vec3(-0.006148865993282231, 0.4228213087641233, 0.1982615944078435), vec3(0.03489351285238437, -0.00429977475793131, 0.06915078030000672), vec3(0.011162788837810736, -0.00441092051361851, 0.11701748802355508), vec3(0.05915570136680059, 0.0008357988581219243, 0.3849535620907508), vec3(0.31323157373993454, 0.517803475348088, 0.6824424915792198), vec3(-0.03332460209976386, 0.03932139932002329, 0.11073192594478752), vec3(-0.0366346819528786, -0.1283966672723736, 0.48036272773611394), vec3(0.15592789105798546, -0.02623992589924002, 0.7057348653792909), vec3(0.16153190196049094, -0.10631150341573313, 0.15492908006959008), vec3(0.22447441741765103, 0.2509728601656112, 0.43995582813515943), vec3(-0.19089292861372897, -0.4368245626682456, 0.8068457876076153), vec3(-0.11912477979227375, -0.09334651854616903, 0.05908582347974107), vec3(0.5897548808786596, -0.0957240956615559, 0.7400010106550355), vec3(0.37188516956417933, 0.14560976183830734, 0.8378396881758272), vec3(-0.15389637034071063, -0.04385726310498313, 0.06878839980827085), vec3(-0.3546677001183713, -0.030167740404108065, 0.1908322551400617), vec3(-0.20578832126858732, -0.14184650075373742, 0.38140087781096915), vec3(0.6513325351576555, -0.317927549521162, 0.6879914980756812), vec3(0.38881174218709813, -0.49019450477727317, 0.45375947653102944), vec3(-0.0005893548795612852, 0.026082232905841156, 0.026198666848805747), vec3(0.22739300584158567, 0.15797193580653957, 0.12116677122358628), vec3(-0.08639050071729845, -0.05820813754367944, 0.12345190908652741), vec3(-0.3997357716963177, -0.42870959887502447, 0.7387740104048995), vec3(0.47188086982161037, -0.2904241115917777, 0.7400183173111585), vec3(0.4268714145315098, 0.1890957681390554, 0.8392646858217195), vec3(8.443389958994264E-05, 0.00031242521122118677, 0.004424750004772765), vec3(-0.47014523152740106, -0.32406863904251054, 0.5010766918517205), vec3(0.4333976232748901, 0.26269119920305667, 0.3280369332612917), vec3(-0.35364006532029857, 0.7384962192942847, 0.2986609256846603), vec3(-0.016382293761336073, 0.010309649869786688, 0.038169442022356566), vec3(0.2258580513098489, 0.03470738402233177, 0.23114444263740563), vec3(-0.009923548602204285, -0.005506926703477481, 0.04325988100990844), vec3(0.2519574072732348, 0.13911795473316252, 0.43435656929707156), vec3(0.01383987132859789, -0.20878038630235246, 0.7218018352476696), vec3(-0.09825476314186686, 0.34479977312110255, 0.9031932834304797), vec3(-0.023843611621493805, 0.04776778751193458, 0.3201980686187415), vec3(-0.042038505157758574, 0.005512345135987039, 0.061711769654008104), vec3(-0.562915209374108, 0.23087576599472306, 0.48318202705672536), vec3(0.0160111180977995, -0.024395601554025037, 0.7437753903137778), vec3(-0.20373607246187264, 0.27861742544079526, 0.603217390227615), vec3(-0.2417598321713186, -0.30674125450586864, 0.5120627454592674), vec3(-0.03693917320993539, 0.11949513712279912, 0.7891609399182193), vec3(-0.00485595422912666, -0.16873393102501433, 0.27265520939577687), vec3(-0.07194402547717084, 0.30513560374270665, 0.1597987557422993), vec3(-0.026640800719101965, 0.022581168400452885, 0.25313640417183064), vec3(-0.4588191089063567, 0.6928696366905451, 0.4795867812176662), vec3(-0.27218811773833446, 0.32266888431196344, 0.23533256414324477), vec3(-0.28673583818176557, -0.25884660986478414, 0.6159685031761353), vec3(-0.26628781859160194, 0.2928626933918217, 0.7800333234221792), vec3(-0.17865060583157008, 0.007417355610476941, 0.9544885164705331), vec3(0.009278717271346083, -0.03765376101000836, 0.035302731629844555), vec3(0.04433850264784198, 0.38771023450696707, 0.2941187263706927), vec3(0.006291468386933831, 0.00409571453806263, 0.0842272363647967), vec3(-0.07289985130647898, -0.04038285075958965, 0.6566448164179609), vec3(-0.014569026565340088, 0.2852039909417563, 0.6258920287239331), vec3(0.10412682202070954, -0.017785311473549635, 0.28666317983942113), vec3(-0.07446597838160164, -0.10107919319334185, 0.04828363627318122), vec3(-0.00658664320412522, -0.10883381202634781, 0.15944638799763056), vec3(-0.12113889160691654, 0.18970054628545927, 0.36531452286441146), vec3(-0.613404270769445, 0.1388076451786859, 0.6544892427553037), vec3(0.11189722958523932, 0.29409602760511727, 0.17987197981471847), vec3(0.10868578430376676, -0.16467650215796292, 0.8728554237037884), vec3(0.44912771964926024, -0.09682307978403956, 0.7171016819483326), vec3(0.020622394216500473, -0.13743985543439835, 0.15068303101754957), vec3(0.1515305377006835, -0.1499185373243327, 0.0836611152738157), vec3(-0.3219598770304216, 0.3475719364039817, 0.7562840746050561), vec3(-0.1498035826651925, -0.037161704188590515, 0.6225611045155816), vec3(-0.12012325636136482, -0.13966509001040356, 0.07677168945283946), vec3(-0.18643253826761005, 0.5563798182114292, 0.7552473595904438), vec3(0.6056332039882941, 0.14263236061978227, 0.5784660191961216), vec3(0.05114826382798541, -0.05229715443447781, 0.3207680895485777), vec3(-0.01967820371563502, -0.024326525220314903, 0.6783346082679977), vec3(0.010806125987487987, 0.012919598223512177, 0.25441741543235463), vec3(0.008945102434643741, 0.03339240153812314, 0.06981523989479793), vec3(0.041483252207296026, 0.04366032358683388, 0.38832255068456556), vec3(0.3337663498563241, 0.30570466117348516, 0.21994526227791686), vec3(0.6419613928046595, -0.3540715559029851, 0.4117614793302339), vec3(0.5182567606099516, -0.13501723211841613, 0.2503554739298115), vec3(0.02149671326021851, -0.03463662293714358, 0.6676926375123164), vec3(0.0001606050121271245, -0.0006117048422085805, 0.0006599262028320398), vec3(-0.14653707606478872, 0.46024945044217724, 0.19564310756126208), vec3(0.0015356124299583625, 0.01077876018867644, 0.030749602669944896), vec3(0.42608859395764537, -0.04987757716754873, 0.5893815651308184), vec3(0.0008329706196904392, -0.47052933581882456, 0.7677658883152214), vec3(-0.46642398722398953, 0.657042065923758, 0.5758010451192859), vec3(0.25734307933855016, 0.6437345456470465, 0.4678572213421964), vec3(-0.6809803784618067, 0.40178334508135666, 0.5447460547712953), vec3(0.00018832329385404486, -0.009038606260104646, 0.8590988798010212), vec3(0.010269238047065126, 0.05190338326935434, 0.03520859801629893), vec3(0.5765123501862126, 0.15898727436478283, 0.2936613792059043), vec3(-0.0044854364071180665, 0.08859792126254476, 0.16813891724400531), vec3(-0.6943309052663608, 0.08447117908507668, 0.5368281924924824), vec3(0.11803099450181512, -0.13985271075217778, 0.2958283893255049), vec3(-0.5945582294502757, -0.14587976984893658, 0.5702868962567205), vec3(0.016745352103218456, 0.25284316775342874, 0.2153447062699333), vec3(0.16113155979200727, 0.15934918425443592, 0.7140304024607985), vec3(-0.0006280330027811415, -0.4563216854815472, 0.8302069051080517), vec3(-0.07235959912815017, 0.07364225807915661, 0.05220489687832535), vec3(0.05076071787535459, -0.014386139311994582, 0.11098808749585201), vec3(0.2352998787781213, 0.08684769890884292, 0.2625577319976254), vec3(-0.08437158584735743, 0.23988513951688079, 0.19105299742726084), vec3(0.11620986373409431, 0.020714510582337455, 0.2580096245765862), vec3(0.26915796807178105, -0.1135399891964195, 0.7131549695985254), vec3(-0.003913213305046001, -7.4138467188533005E-06, 0.02484697329913142), vec3(0.445457836118894, 0.3854815031292277, 0.25543839817423836), vec3(-0.003878548226546581, -0.014675995171430829, 0.3730776425810068), vec3(0.2051921396795384, 0.00914042723903117, 0.11145742659520964), vec3(-0.003992608175620549, 0.004393411187875502, 0.0030095113815213643), vec3(-0.14787275702733757, 0.009323066061305766, 0.22445323108241497), vec3(-0.09630415920977844, 0.05535390601672093, 0.1476193254947016), vec3(0.04397985380823332, -0.006482911446097374, 0.4625255431229403), vec3(0.0938045490350414, 0.37073729062547744, 0.3859544151105979), vec3(-0.27155949594680623, -0.39289590351640946, 0.21610326983856956), vec3(0.0018915268530594128, 0.0006148874334131931, 0.42816830607902695), vec3(-0.29032135815012544, 0.16361985711864105, 0.19586608096855213), vec3(0.26992365906856125, 0.09254204092488584, 0.1654161627166676), vec3(-0.0005900705135592525, -0.08120676340051212, 0.14466468527562495), vec3(-0.42393253769062805, -0.34302039384576527, 0.7793352526634594), vec3(-0.023045395550928018, 0.024757059322929865, 0.2119522410712521), vec3(0.09389706557670677, -0.2229411281189295, 0.30924587929329084), vec3(0.42885202134821254, -0.13002459981490408, 0.817496502700077), vec3(-0.2522462598107139, -0.09680435061173139, 0.7341213375412475), vec3(0.015063094187414871, 2.6443314556301133E-05, 0.13518385370498745), vec3(0.008826219420121786, 0.25355786497189625, 0.14080230005897756), vec3(0.3458716969333051, 0.09804544583612312, 0.5528507363878618), vec3(-0.21049611497160145, 0.12891479790672591, 0.37301800534226603), vec3(0.18796425307895018, -0.06602412888151014, 0.26458060520891186), vec3(-0.06833163712268428, -0.09092828130887018, 0.4025492802999875), vec3(-0.3258011486158034, -0.10079615061413937, 0.6627683640304705), vec3(-0.19598682225911748, -0.5719681943011716, 0.2212820328915594), vec3(-0.03614763174750844, 0.3148152024427947, 0.4567016027682314), vec3(-0.05754016769831988, -0.22144197612852143, 0.6881190488265958), vec3(0.32455776655522944, -0.2412751055107397, 0.23610813613332127), vec3(-0.04324422194516998, 0.19670146940852667, 0.23015456318445843), vec3(-0.07649898206961073, 0.5907709720026849, 0.33379901540481227), vec3(-0.0991133584628257, -0.020444791144680584, 0.21475183534577427), vec3(-0.1178856444901674, -0.1968505775070716, 0.12638196074517113), vec3(-0.40024934359678266, -0.20348541486095822, 0.5420003493808783), vec3(-0.23142544218880925, -0.029397074922200256, 0.11110342645013874), vec3(-0.25188617688033416, -0.29989673262278504, 0.47672348556667904), vec3(-0.04547811368959362, -0.12259354204224379, 0.5883235681740364), vec3(0.8451029203611439, -0.2178951579361184, 0.38405478988908004), vec3(-0.3525338809956355, 0.14407761579676576, 0.4508844769096839), vec3(0.19712081655383307, -0.1260325939910692, 0.8470933383926159), vec3(0.012102846894554127, -0.0900851597830616, 0.1799314143090066), vec3(0.575079861892797, -0.1789487025989891, 0.2357574674010073), vec3(-0.27304511021041267, 0.1241853216783465, 0.1944753586635661), vec3(-0.07662730723785453, 0.48081917666685225, 0.7802307844719333), vec3(-0.04829379919213146, -0.15152599043304293, 0.4210819565426061), vec3(-0.00037465095507031404, 0.000308389850257379, 0.002670934510661046), vec3(0.14536509119950067, -0.3929822152037361, 0.4056978717135863), vec3(-0.17184226106859166, -0.12571015953293369, 0.973150231201514), vec3(0.05321870493322726, -0.021246388570441296, 0.8992332104355224), vec3(0.025454772918929256, -0.05948099993585895, 0.7273958967920121), vec3(0.040835278121960895, -0.012306798481752985, 0.4287220748630028), vec3(-0.10283620782213503, -0.356372534857595, 0.3866618540786857), vec3(2.5624209214473762E-05, -0.024170693980702068, 0.14571862716712938), vec3(-0.017724492415958536, 0.049155461758479714, 0.47765379920964407), vec3(-0.2859067432711016, -0.0670462129580803, 0.21793480051891184), vec3(0.03390027832079843, -0.06706712463291836, 0.17971760170281706), vec3(0.00308502135675629, -0.001138875253867714, 0.04205917318435853), vec3(0.29515552434903214, -0.6576271295645457, 0.3811187723542532), vec3(0.1407972674281803, -0.08246646384544265, 0.204079891315854), vec3(0.4847354600846315, -0.23411941592377858, 0.317779905139672), vec3(-0.07372802097865955, -0.05249345838420523, 0.6223261240307782), vec3(0.13282996832062707, -0.14994558884428366, 0.7118498144519638), vec3(-0.04158522674483267, -0.008344407357502345, 0.06189827822492028), vec3(0.0004091314715531501, -0.009966958448502502, 0.21816647696762825), vec3(-0.5367801112223486, -0.2884903634515675, 0.4291230375740782), vec3(0.06772206595294723, 0.0029170013957862833, 0.13285519291199702), vec3(0.0035388392412805713, -0.057812043454963186, 0.0353830837275073), vec3(-0.037133476341781504, 0.34303452724971495, 0.30734538357879876), vec3(-0.11812624147751428, -0.24145448244034587, 0.6385169488862076), vec3(0.02642998656495984, 0.2108432093584774, 0.5586150697483757), vec3(-0.17759612496341545, -0.010974670769435787, 0.7696426352862065), vec3(0.7813194397337443, -0.4296097512285621, 0.4036657006391766), vec3(-0.015266155696497266, 0.002803400890375376, 0.19143413300646775), vec3(0.05850019135697352, 0.19399009524778205, 0.158437774359887), vec3(0.03591755222989105, -0.05745406961521283, 0.05705099366013992), vec3(-0.0003858774484933162, 0.005768216454982263, 0.011285397714219169), vec3(0.05917142805978706, 0.05821200974894529, 0.03428113839367069), vec3(-0.34611939745940856, 0.05674171380569424, 0.21523489471126173), vec3(0.11447422573663267, 0.5241871312534415, 0.8059323793653588), vec3(0.19129152185970977, 0.12882270342602678, 0.7059326981482483), vec3(-0.014024645538372368, 0.01350327192992349, 0.05739378568127466), vec3(-0.44433152683834953, -0.02991552822357008, 0.3390266679874418), vec3(0.01661750393759693, -0.42019614715300574, 0.7087330408554838), vec3(-0.08831467206757244, -0.03784967119031552, 0.7317442674394151), vec3(0.03912915649189007, -0.12948589688255183, 0.8644737025330113), vec3(0.02409912999815859, 0.09394658998079644, 0.11052750565976681), vec3(-0.027279021821676488, 0.056217581495302274, 0.06434430163341709), vec3(-0.20100056597664445, 0.31938392635731855, 0.6842928267228191), vec3(0.09789707364295998, 0.29021744637908403, 0.14325369934926657), vec3(0.0007380748660966825, -0.034227637824094936, 0.053592829994079945), vec3(-0.002346191576856867, 0.009553594502135906, 0.5746966467925697), vec3(0.21816705205420758, 0.6502237430626449, 0.3865937718612638), vec3(-0.47030579625107904, -0.06815483837125168, 0.5033186171119217), vec3(-0.06231289483838796, 0.7940721315466137, 0.5449413686468093), vec3(-0.08186901528594005, 0.09559847140428468, 0.21593330436940394), vec3(-0.10861904694516956, 0.01768250533833256, 0.4487926292054862), vec3(0.060444473499565936, 0.5267229259280329, 0.21400478265311462), vec3(0.03547392135217118, -0.01964530235122021, 0.13304943710758607), vec3(-0.01597325178832171, -0.03147936483106145, 0.17075057658750578), vec3(0.0050290314519158595, 0.010947129600017152, 0.3007240441172933), vec3(-0.10997529404166008, -0.001228955729669037, 0.9283497194273803), vec3(0.0872663641248544, -0.03091478205227949, 0.07815012572585459), vec3(-0.2217593445475005, -0.003990094482897411, 0.20699312484540766), vec3(0.15744776818418946, 0.068828719871009, 0.2500384598269115), vec3(-0.04978635755912502, -0.050248519591157725, 0.9376598032842122), vec3(-0.10162486995195211, -0.11820644362730515, 0.42435198877294444), vec3(-0.03391712169375406, -0.23650054036403817, 0.2471320596320642), vec3(0.37636630071949007, -0.07147864812164882, 0.8038836560980384), vec3(0.25203805751127506, 0.11705921979480272, 0.276370091085236), vec3(0.007286927766461543, 0.05832891880281903, 0.3480874015437355), vec3(0.03809849770993473, 0.07578178242669785, 0.06187603132752792), vec3(-0.009983008670978604, -0.2716494760052865, 0.5690827496984995), vec3(-0.007845869740575597, -0.011198033924085408, 0.8470719355629232), vec3(-0.1347750418392891, 0.16776397603717896, 0.471889866239085), vec3(-0.016086590260345892, -0.06495499977333934, 0.5605253607928532), vec3(-0.00021215451625133944, -0.0026408330959818193, 0.06912180754676547), vec3(-0.017010327229873196, -0.7055900151891985, 0.5829274015083503), vec3(0.07620639322613477, -0.017780324737502597, 0.32779913430261015), vec3(0.17494863681057127, 0.07991517822088444, 0.2844840564046593), vec3(-0.33577486123815237, 0.39201430808650245, 0.30251124143695224), vec3(-0.04530955795585364, -0.015917373081436568, 0.03505280024387819), vec3(0.05026466918189321, 0.08989998486821645, 0.2672630206866334), vec3(0.0077931177560203, -0.026838938863645675, 0.12075287412786605), vec3(-0.4148639427338827, 0.080505548451872, 0.46614768201383766), vec3(0.014365498004789864, 0.00014144092318335054, 0.01781364479334818), vec3(4.5309354760042255E-05, 8.615177395938163E-05, 0.002640847509991745), vec3(0.014363034399220202, -0.006040025535325613, 0.2861203131697832), vec3(0.1101430583063637, -0.1385261849762738, 0.14211412648211505), vec3(-0.002842710231020168, 0.003792786887897784, 0.005515530164638111), vec3(0.32874038970236935, 0.1281159203657669, 0.5176909926762687), vec3(-0.1311480779896726, 0.3116915043322398, 0.28297543929978347), vec3(0.11237760043813051, -0.5609220473700736, 0.7593386742713937), vec3(-0.07204326448325438, 0.14274405437190799, 0.17514460523193104), vec3(-0.005249355036995226, -0.0014180212413081317, 0.6672085951707636), vec3(-0.33287953854345437, -0.5670143672297563, 0.46929691381604527), vec3(-0.174188513310521, 0.5883891834595055, 0.7113537401414797), vec3(-0.023102556294345565, 0.11196771096407385, 0.2294117836896411), vec3(-0.21486204561788352, -0.12374579205509952, 0.45788673710420974), vec3(-0.3310251616354598, -0.2436501817951975, 0.6836552507457103), vec3(-0.20664456112349852, -0.09687694269960435, 0.3560469155447572), vec3(-0.6162389357956337, -0.1736563928951767, 0.48517687972888585), vec3(-0.021898300805670463, 0.03068927101986966, 0.19559247626236026), vec3(0.26331504452436516, -0.13559735196944822, 0.25299596654554035), vec3(0.6167342670318857, 0.41750610944713756, 0.6448073822912783), vec3(0.1753940118195829, -0.20213130975921798, 0.9204898130628167), vec3(0.2820387917110727, -0.44788781252287563, 0.7817867192802613), vec3(-0.7391288727882339, 0.3623279643428524, 0.45412526159340644), vec3(-0.14399209554443684, -0.035446672972391374, 0.09020918709321758), vec3(0.28161568830708383, -0.02098206193314542, 0.28410994800913847), vec3(0.04100183589278931, -0.006048106928610241, 0.17594960286791025), vec3(-0.18073236622615169, -0.2305084038559294, 0.4615988220433073), vec3(0.05838367533974036, -0.024280061764686868, 0.22605476422970316), vec3(-0.03198306226615036, 0.5244332774082906, 0.5975529571768734), vec3(-0.005083807561795603, -0.3631004291955189, 0.44722207213668336), vec3(-0.12265603793874147, 0.030372932384982513, 0.20581470356670753), vec3(0.3952290752201807, 0.4259267166361117, 0.2877977850634774), vec3(0.6588507801176655, 0.04683575446166606, 0.7470947875441164), vec3(0.40082748052061296, -0.14164913366372214, 0.5232564987820922), vec3(-0.12996835991964148, 0.14419701519124334, 0.20248328847448446), vec3(-0.5093553565066881, -0.39083125609533076, 0.6834139722191304), vec3(-0.14129667409953553, -0.009703274397608997, 0.0856894850006847), vec3(0.03679336673596488, 0.04617683944888174, 0.10073783503296188), vec3(0.6837127907799284, -0.2762806883429214, 0.4861032100196401), vec3(0.20602936147972908, 0.3037312333325108, 0.671710263136784), vec3(0.38582322225089777, -0.6079518580797617, 0.559839812372568), vec3(-0.12382506101434965, 0.07004936231956775, 0.05967944162036881), vec3(-0.17246205496111477, 0.036981045490130954, 0.35177667259584855), vec3(0.007801145106343863, -0.01594976548163025, 0.17907344892525934), vec3(0.04473280185408211, -0.09881854822943234, 0.7025086183046483), vec3(0.1970803816693997, -0.15057417615215843, 0.5737424630658308), vec3(0.4793385955491699, -0.12527941321334535, 0.6444127947703094), vec3(0.01166195359432947, 0.19047461524466228, 0.3454864531296855), vec3(0.3946273803424294, 0.2891425833687301, 0.22697944860892444), vec3(-0.7753333592835192, 0.11863401640523069, 0.48174778833266696), vec3(0.6639251055568153, -0.32713212574431555, 0.29010479614217966), vec3(-0.3628686214089046, 0.06536525884141625, 0.7772428781747683), vec3(0.37144479076084685, 0.08601414572661267, 0.8118245889032889), vec3(-0.05018146507987357, -0.1039810660502565, 0.07709622904541195), vec3(-0.16450770318795613, 0.35016274416265347, 0.5477372967109695), vec3(-0.008836387444071704, 0.040286399149093946, 0.06711715283366797), vec3(-0.023070229532913624, 0.009948113245398233, 0.05725441037345099), vec3(-0.017202396234134356, -0.08502112281227894, 0.07237261536017131), vec3(0.16716955985710463, 0.03475364600458599, 0.8085609050510496), vec3(-0.5391635256319689, 0.20214150088120733, 0.5929214932803119), vec3(0.008785110972263505, -0.06893046879624322, 0.039229492730397525), vec3(-0.0034597942961114097, -0.05982690191752543, 0.19730670086095523), vec3(-0.0064715948757551505, -0.049831210008110936, 0.14665416632247372), vec3(-0.3354261558720081, -0.5140832778976109, 0.24539246281224014), vec3(-0.2678938775330865, -0.19486540584071482, 0.2673932558180697), vec3(-0.0008497026353796802, 0.001472755661090056, 0.15937990836431312), vec3(-0.178705798117251, 0.31173981896384595, 0.8710334792140493), vec3(-0.5020081808065688, 0.0564641302294827, 0.2892788542727539), vec3(-0.002358965156842957, 0.01610562251398533, 0.23965116946515846), vec3(0.09968552704245577, -0.05127618276951725, 0.8526827176310501), vec3(-0.001736435811339284, -0.005579586786838018, 0.2573137157405497), vec3(0.01774779621532128, -0.2565834523567512, 0.63654576777086), vec3(0.08849344771411098, -0.13747192509114403, 0.2703785720454574), vec3(0.3453226009524484, -0.25500568854919753, 0.45299756671219116), vec3(0.018133101644715027, -0.03965593683648991, 0.058590673885655246), vec3(-0.5332909684872371, 0.4980346315140262, 0.33838616759026224), vec3(-0.4711544795813942, 0.03786371052688139, 0.2823605284729039), vec3(0.05291507658602189, 0.022784044764673557, 0.7579806776872017), vec3(0.008752013657897273, 0.12817846161606847, 0.4445471708833308), vec3(-0.4184552354968527, -0.46342088326825726, 0.4599770104545783), vec3(-0.08383757754677994, -0.26594527957127306, 0.24000918063473167), vec3(0.028761972080114682, 0.09611799877874297, 0.11419123362751998), vec3(0.11061585322399427, 0.201404955885906, 0.6563636260465804), vec3(0.0902631630705044, 0.08283288874356676, 0.8665859904223253), vec3(0.4192284335497342, -0.5315337900519417, 0.3897003677875571), vec3(-0.33231826697117534, 0.12333915553644786, 0.14035873417775613), vec3(0.0076204818651111695, 0.29974178009171965, 0.6891140715204409), vec3(0.615069727408017, -0.2946688184056548, 0.5212240861761406), vec3(0.0014197527565162592, 0.0010878032743618109, 0.0031160626282742024), vec3(-0.05563557894106705, 0.04024766460234303, 0.18968334265672973), vec3(-0.02743109532038141, 0.02869104057241221, 0.8742566996482153), vec3(0.002724103490613468, 0.004072488753180313, 0.05233502185690111), vec3(-0.0802747963515838, 0.11133493031590916, 0.25588483117669303), vec3(-0.031551960783882844, -0.004287324463855506, 0.046938792092250596), vec3(-0.011722125197305535, 0.33643850438580036, 0.5973069356709331), vec3(-0.026792899185131256, -0.02544530327978411, 0.7049032637300122), vec3(-0.16974246645906294, 0.09000901550912922, 0.9806074249848706), vec3(-0.5701940029294009, 0.3843833566421977, 0.252219449378637), vec3(0.06198150594426063, -0.1435765614993897, 0.7378393979216963) );
35: 
36: 
37: #ifdef Vertex
38: layout(location = 0) in vec2 DiffuseColorCoordinates;
39: layout(location = 1) in vec4 Positions;
40: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
41: layout(location = 1) out vec4 fs_Positions;
42: void main()
43: {
44:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
45:     gl_Position = Positions;
46:     fs_Positions = Positions;
47: }
48: 
49: #endif
50: 
51: 
52: 
53: #ifdef Fragment
54: 
55: vec3 SLEAardvarkRenderDemo_SSAO_project_3xKKw0NaNrmSOKnCCRYoyQ(vec3 vp)
56: {
57:     vec3 vp1 = vp;
58:     vp1.z = min(-0.01, vp1.z);
59:     vec4 pp = (vec4(vp1, 1.0) * ProjTrafo);
60:     return (pp.xyz / pp.w);
61: }
62: 
63: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
64: layout(location = 1) in vec4 fs_Positions;
65: layout(location = 0) out vec4 ColorsOut;
66: void main()
67: {
68:     vec2 ndc = (fs_Positions.xy / fs_Positions.w);
69:     vec4 pp0 = vec4(ndc.x, ndc.y, ((2.0 * texture(depth, fs_DiffuseColorCoordinates).x) - 1.0), 1.0);
70:     vec4 temp = (pp0 * ProjTrafoInv);
71:     vec3 z = normalize((vec4(normalize(texture(normal, fs_DiffuseColorCoordinates).xyz), 0.0) * ViewTrafo).xyz);
72:     vec3 y = normalize(cross(z, normalize(texture(random, pp0.xy).xyz)));
73:     float occlusion = 0.0;
74:     int last = (Samples - 1);
75:     for(int si = 0; (si <= last); si++)
76:     {
77:         vec3 dir = (_constant0[si] * Radius);
78:         float temp1 = (float(si) / float((Samples - 1)));
79:         vec3 dirscaled = (dir * mix(1.0, (temp1 * temp1), 0.1));
80:         vec3 p = ((((temp.xyz / temp.w) + (normalize(cross(y, z)) * dirscaled.x)) + (y * dirscaled.y)) + (z * dirscaled.z));
81:         vec3 pp = (0.5 * (SLEAardvarkRenderDemo_SSAO_project_3xKKw0NaNrmSOKnCCRYoyQ(p) + vec3(1.0, 1.0, 1.0)));
82:         if((texture(depthCmp, vec3(pp.xy, (0.5 * (SLEAardvarkRenderDemo_SSAO_project_3xKKw0NaNrmSOKnCCRYoyQ((p * (1.0 - (Threshold / (-p.z))))) + vec3(1.0, 1.0, 1.0))).z)) < 0.5))
83:         {
84:             occlusion = (occlusion + ((texture(depth, pp.xy).x > pp.z) ? 0.0 : 1.0));
85:         }
86:     }
87:     float occlusion1 = min(1.0, ((occlusion / float(Samples)) * OcclusionStrength));
88:     float ambient = (1.0 - occlusion1);
89:     ColorsOut = vec4(ambient, ambient, ambient, 1.0);
90: }
91: 
92: #endif

 6: texture created
 6: result created
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerView
 9: {
10:     vec3 CameraLocation;
11:     mat4x4 ViewProjTrafo;
12: };
13: 
14: 
15: layout(std140)
16: uniform PerModel
17: {
18:     mat4x4 ModelTrafo;
19: };
20: 
21: 
22: layout(std140)
23: uniform Global
24: {
25:     float SkyMapIntensity;
26: };
27: 
28: 
29: uniform samplerCube skySampler;
30: 
31: 
32: #ifdef Vertex
33: 
34: layout(location = 0) in vec4 Colors;
35: layout(location = 1) in vec3 Normals;
36: layout(location = 2) in vec4 Positions;
37: layout(location = 0) out vec4 fs_Colors;
38: layout(location = 1) out vec3 fs_Normals;
39: layout(location = 2) out vec4 fs_WorldPosition;
40: void main()
41: {
42:     vec4 wp = (Positions * ModelTrafo);
43:     vec4 clipPos = ((wp + vec4(CameraLocation, 0.0)) * ViewProjTrafo);
44:     fs_Colors = Colors;
45:     fs_Normals = Normals;
46:     gl_Position = vec4(clipPos.x, clipPos.y, clipPos.w, clipPos.w);
47:     fs_WorldPosition = wp;
48: }
49: 
50: #endif
51: 
52: 
53: 
54: #ifdef Fragment
55: 
56: layout(location = 0) in vec4 fs_Colors;
57: layout(location = 1) in vec3 fs_Normals;
58: layout(location = 2) in vec4 fs_WorldPosition;
59: layout(location = 0) out vec4 ColorsOut;
60: layout(location = 1) out vec2 MaterialPropertiesOut;
61: layout(location = 2) out vec3 NormalsOut;
62: layout(location = 3) out vec4 WorldPositionOut;
63: void main()
64: {
65:     ColorsOut = vec4((texture(skySampler, normalize(fs_WorldPosition.xyz)).xyz * SkyMapIntensity), fs_Colors.w);
66:     MaterialPropertiesOut = vec2(-1.0, -1.0);
67:     NormalsOut = fs_Normals;
68:     WorldPositionOut = fs_WorldPosition;
69: }
70: 
71: #endif

 6: texture created
 6: result created
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveRenderingResultCube.compute
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 6: [GL] RenderObjects: +1/-0 (17ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 6: [GL] RenderObjects: +1/-0 (9ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 6: [GL] RenderObjects: +1/-0 (12ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 6: [GL] RenderObjects: +1/-0 (11ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 6: [GL] RenderObjects: +1/-0 (9ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform Global
16: {
17:     float SkyMapRotation;
18: };
19: 
20: 
21: layout(std140)
22: uniform PerView
23: {
24:     mat4x4 ViewProjTrafo;
25: };
26: 
27: 
28: uniform sampler2D skySamplerEquirec;
29: 
30: 
31: #ifdef Vertex
32: 
33: layout(location = 0) in vec4 Positions;
34: layout(location = 0) out vec4 fs_WorldPosition;
35: void main()
36: {
37:     vec4 wp = (Positions * ModelTrafo);
38:     gl_Position = (wp * ViewProjTrafo);
39:     fs_WorldPosition = wp;
40: }
41: 
42: #endif
43: 
44: 
45: 
46: #ifdef Fragment
47: 
48: vec2 SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(vec3 vec)
49: {
50:     return (0.5 + (vec2(0.1591, 0.3183) * vec2((SkyMapRotation + atan(vec.z, vec.x)), asin(vec.y))));
51: }
52: 
53: layout(location = 0) in vec4 fs_WorldPosition;
54: layout(location = 0) out vec4 ColorsOut;
55: void main()
56: {
57:     ColorsOut = texture(skySamplerEquirec, SLEAardvarkRenderDemo_PBR_sampleSphericalMap_U6ZYetgkptf_00i005gCJPXg(normalize(fs_WorldPosition.xyz)));
58: }
59: 
60: #endif

 6: [GL] RenderObjects: +1/-0 (12ms)
 6: using optimized native program
 6: WARNING: AdaptiveOutputCubeTexture.compute
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform Global
  9: {
 10:     float AlbedoFactor;
 11:     bool Discard;
 12:     float DisplacmentStrength;
 13:     float Metallic;
 14:     float NormalMapStrength;
 15:     float Roughness;
 16: };
 17: 
 18: 
 19: layout(std140)
 20: uniform PerModel
 21: {
 22:     mat4x4 ModelTrafo;
 23:     mat4x4 ModelTrafoInv;
 24: };
 25: 
 26: 
 27: layout(std140)
 28: uniform PerView
 29: {
 30:     mat4x4 ViewProjTrafo;
 31: };
 32: 
 33: 
 34: uniform sampler2D diffuseSampler;
 35: 
 36: uniform sampler2D metallicSampler;
 37: 
 38: uniform sampler2D normalSampler;
 39: 
 40: uniform sampler2D roughnessSampler;
 41: 
 42: uniform sampler2D samplerDisp;
 43: 
 44: 
 45: #ifdef Vertex
 46: 
 47: layout(location = 0) in vec2 DiffuseColorCoordinates;
 48: layout(location = 1) in vec3 DiffuseColorUTangents;
 49: layout(location = 2) in vec3 DiffuseColorVTangents;
 50: layout(location = 3) in vec3 Normals;
 51: layout(location = 4) in vec4 Positions;
 52: layout(location = 0) out vec2 tc_DiffuseColorCoordinates;
 53: layout(location = 1) out vec3 tc_DiffuseColorUTangents;
 54: layout(location = 2) out vec3 tc_DiffuseColorVTangents;
 55: layout(location = 3) out vec3 tc_Normals;
 56: layout(location = 4) out vec4 tc_WorldPosition;
 57: void main()
 58: {
 59:     tc_DiffuseColorCoordinates = DiffuseColorCoordinates;
 60:     tc_DiffuseColorUTangents = (vec4(DiffuseColorUTangents, 0.0) * ModelTrafo).xyz;
 61:     tc_DiffuseColorVTangents = (vec4(DiffuseColorVTangents, 0.0) * ModelTrafo).xyz;
 62:     tc_Normals = (ModelTrafoInv * vec4(Normals, 0.0)).xyz;
 63:     tc_WorldPosition = (Positions * ModelTrafo);
 64: }
 65: 
 66: #endif
 67: 
 68: 
 69: 
 70: #ifdef TessControl
 71: 
 72: layout(vertices = 3) out;
 73: layout(location = 0) in vec2 tc_DiffuseColorCoordinates[];
 74: layout(location = 1) in vec3 tc_DiffuseColorUTangents[];
 75: layout(location = 2) in vec3 tc_DiffuseColorVTangents[];
 76: layout(location = 3) in vec3 tc_Normals[];
 77: layout(location = 4) in vec4 tc_WorldPosition[];
 78: layout(location = 0) out vec2 te_DiffuseColorCoordinates[];
 79: layout(location = 1) out vec3 te_DiffuseColorUTangents[];
 80: layout(location = 2) out vec3 te_DiffuseColorVTangents[];
 81: layout(location = 3) out vec3 te_Normals[];
 82: layout(location = 4) out vec4 te_WorldPosition[];
 83: void main()
 84: {
 85:     if((gl_InvocationID == 0))
 86:     {
 87:         float level = ((DisplacmentStrength == 0.0) ? 1.0 : 32.0);
 88:         gl_TessLevelInner[0] = level;
 89:         gl_TessLevelOuter[0] = level;
 90:         gl_TessLevelOuter[1] = level;
 91:         gl_TessLevelOuter[2] = level;
 92:     }
 93:     te_DiffuseColorCoordinates[gl_InvocationID] = tc_DiffuseColorCoordinates[gl_InvocationID];
 94:     te_DiffuseColorUTangents[gl_InvocationID] = tc_DiffuseColorUTangents[gl_InvocationID];
 95:     te_DiffuseColorVTangents[gl_InvocationID] = tc_DiffuseColorVTangents[gl_InvocationID];
 96:     te_Normals[gl_InvocationID] = tc_Normals[gl_InvocationID];
 97:     te_WorldPosition[gl_InvocationID] = tc_WorldPosition[gl_InvocationID];
 98: }
 99: 
100: #endif
101: 
102: 
103: 
104: #ifdef TessEval
105: 
106: layout(triangles, equal_spacing, ccw) in;
107: layout(location = 0) in vec2 te_DiffuseColorCoordinates[];
108: layout(location = 1) in vec3 te_DiffuseColorUTangents[];
109: layout(location = 2) in vec3 te_DiffuseColorVTangents[];
110: layout(location = 3) in vec3 te_Normals[];
111: layout(location = 4) in vec4 te_WorldPosition[];
112: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
113: layout(location = 1) out vec3 fs_DiffuseColorUTangents;
114: layout(location = 2) out vec3 fs_DiffuseColorVTangents;
115: layout(location = 3) out vec3 fs_Normals;
116: layout(location = 4) out vec4 fs_WorldPosition;
117: void main()
118: {
119:     vec3 n = normalize((((gl_TessCoord.x * te_Normals[0]) + (gl_TessCoord.y * te_Normals[1])) + (gl_TessCoord.z * te_Normals[2])));
120:     vec2 tc = (((gl_TessCoord.x * te_DiffuseColorCoordinates[0]) + (gl_TessCoord.y * te_DiffuseColorCoordinates[1])) + (gl_TessCoord.z * te_DiffuseColorCoordinates[2]));
121:     vec4 wp = ((((gl_TessCoord.x * te_WorldPosition[0]) + (gl_TessCoord.y * te_WorldPosition[1])) + (gl_TessCoord.z * te_WorldPosition[2])) + vec4((n * ((-0.5 + texture(samplerDisp, tc).x) * DisplacmentStrength)), 0.0));
122:     fs_DiffuseColorCoordinates = tc;
123:     fs_DiffuseColorUTangents = (((gl_TessCoord.x * te_DiffuseColorUTangents[0]) + (gl_TessCoord.y * te_DiffuseColorUTangents[1])) + (gl_TessCoord.z * te_DiffuseColorUTangents[2]));
124:     fs_DiffuseColorVTangents = (((gl_TessCoord.x * te_DiffuseColorVTangents[0]) + (gl_TessCoord.y * te_DiffuseColorVTangents[1])) + (gl_TessCoord.z * te_DiffuseColorVTangents[2]));
125:     fs_Normals = n;
126:     gl_Position = (wp * ViewProjTrafo);
127:     fs_WorldPosition = wp;
128: }
129: 
130: #endif
131: 
132: 
133: 
134: #ifdef Fragment
135: 
136: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
137: layout(location = 1) in vec3 fs_DiffuseColorUTangents;
138: layout(location = 2) in vec3 fs_DiffuseColorVTangents;
139: layout(location = 3) in vec3 fs_Normals;
140: layout(location = 4) in vec4 fs_WorldPosition;
141: layout(location = 0) out vec4 ColorsOut;
142: layout(location = 1) out vec2 MaterialPropertiesOut;
143: layout(location = 2) out vec3 NormalsOut;
144: layout(location = 3) out vec4 WorldPositionOut;
145: void main()
146: {
147:     vec3 texNormal = normalize(((2.0 * texture(normalSampler, fs_DiffuseColorCoordinates).xyz) - vec3(1.0, 1.0, 1.0)));
148:     vec4 ColorsC = texture(diffuseSampler, fs_DiffuseColorCoordinates);
149:     if(Discard)
150:     {
151:         discard;
152:     }
153:     ColorsOut = vec4(pow((ColorsC.xyz * AlbedoFactor), vec3(2.2, 2.2, 2.2)), ColorsC.w);
154:     MaterialPropertiesOut = vec2((Metallic * texture(metallicSampler, fs_DiffuseColorCoordinates).x), (Roughness * texture(roughnessSampler, fs_DiffuseColorCoordinates).x));
155:     NormalsOut = mix(fs_Normals, normalize((((normalize(fs_Normals) * texNormal.z) + (normalize(fs_DiffuseColorUTangents) * texNormal.x)) + (normalize(fs_DiffuseColorVTangents) * texNormal.y))), NormalMapStrength);
156:     WorldPositionOut = fs_WorldPosition;
157: }
158: 
159: #endif

 6: [GL] RenderObjects: +454/-0 (520ms)
 6: using optimized native program
 6: texture created
 6: [GL] RenderObjects: +1/-0 (888ms)
 6: using optimized native program
 6: [GL] RenderObjects: +1/-0 (923ms)
 6: using optimized native program
 6: texture created
 6: texture created
 6: result created
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveRenderingResultCube.compute
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 6: [GL] RenderObjects: +1/-0 (17ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 6: [GL] RenderObjects: +1/-0 (14ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 6: [GL] RenderObjects: +1/-0 (14ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 6: [GL] RenderObjects: +1/-0 (15ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 6: [GL] RenderObjects: +1/-0 (14ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
 1: #version 410
 2: #define __SHADER_STAGE__
 3: 
 4: 
 5: 
 6: 
 7: layout(std140)
 8: uniform PerModel
 9: {
10:     mat4x4 ModelTrafo;
11: };
12: 
13: 
14: layout(std140)
15: uniform PerView
16: {
17:     mat4x4 ViewProjTrafo;
18: };
19: 
20: 
21: uniform samplerCube envSampler;
22: 
23: 
24: #ifdef Vertex
25: 
26: layout(location = 0) in vec4 Positions;
27: layout(location = 0) out vec4 fs_WorldPosition;
28: void main()
29: {
30:     vec4 wp = (Positions * ModelTrafo);
31:     gl_Position = (wp * ViewProjTrafo);
32:     fs_WorldPosition = wp;
33: }
34: 
35: #endif
36: 
37: 
38: 
39: #ifdef Fragment
40: 
41: layout(location = 0) in vec4 fs_WorldPosition;
42: layout(location = 0) out vec4 ColorsOut;
43: void main()
44: {
45:     vec3 normal = normalize(fs_WorldPosition.xyz);
46:     vec3 right = cross(vec3(0.0, 1.0, 0.0), normal);
47:     float nrSamples = 0.0;
48:     vec4 irradiance = vec4(0.0, 0.0, 0.0, 0.0);
49:     float phi = 0.0;
50:     float theta = 0.0;
51:     while((phi <= 6.283185307179586))
52:     {
53:         theta = 0.0;
54:         while((theta <= 1.5707963267948966))
55:         {
56:             nrSamples = (nrSamples + 1.0);
57:             vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));
58:             irradiance = (irradiance + texture(envSampler, (((tangentSample.x * right) + (tangentSample.y * cross(normal, right))) + (tangentSample.z * normal))));
59:             theta = (theta + 0.025);
60:         }
61:         phi = (phi + 0.025);
62:     }
63:     ColorsOut = ((3.141592653589793 * irradiance) / nrSamples);
64: }
65: 
66: #endif

 6: [GL] RenderObjects: +1/-0 (14ms)
 6: using optimized native program
 7: [Client] 2: stopped
 6: WARNING: AdaptiveOutputCubeTexture.compute
 6: texture created
 6: texture created
 6: result created
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveFramebufferCube.compute
 6: WARNING: AdaptiveRenderingResultCube.compute
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (45ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (36ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (37ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (41ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (44ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (84ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (44ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (36ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (36ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (36ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (37ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (36ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (39ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (37ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (39ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (39ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (37ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (36ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (44ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 31: {
 32:     uint bits = ((bitss << 16) | (bitss >> 16));
 33:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 34:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 35:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 36:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 37:     return (float(bits) * 2.3283064365386963E-10);
 38: }
 39: 
 40: 
 41: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 42: {
 43:     float a = (roughness * roughness);
 44:     float phi = (6.283185307179586 * xi.x);
 45:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 46:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 47:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 48:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 49:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (42ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (38ms)
 6: using optimized native program
 6: WARNING: AdaptiveRenderingResultCube.compute1
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform Global
 16: {
 17:     float Roughness;
 18: };
 19: 
 20: 
 21: layout(std140)
 22: uniform PerView
 23: {
 24:     mat4x4 ViewProjTrafo;
 25: };
 26: 
 27: 
 28: uniform samplerCube envSampler;
 29: 
 30: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 31: {
 32:     float a = (roughness * roughness);
 33:     float phi = (6.283185307179586 * xi.x);
 34:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 35:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 36:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 37:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 38:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 39: }
 40: 
 41: 
 42: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 43: {
 44:     uint bits = ((bitss << 16) | (bitss >> 16));
 45:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 46:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 47:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 48:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 49:     return (float(bits) * 2.3283064365386963E-10);
 50: }
 51: 
 52: 
 53: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 54: {
 55:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 56: }
 57: 
 58: 
 59: 
 60: #ifdef Vertex
 61: 
 62: layout(location = 0) in vec4 Colors;
 63: layout(location = 1) in vec4 Positions;
 64: layout(location = 0) out vec4 fs_Colors;
 65: layout(location = 1) out vec4 fs_WorldPosition;
 66: void main()
 67: {
 68:     vec4 wp = (Positions * ModelTrafo);
 69:     fs_Colors = Colors;
 70:     gl_Position = (wp * ViewProjTrafo);
 71:     fs_WorldPosition = wp;
 72: }
 73: 
 74: #endif
 75: 
 76: 
 77: 
 78: #ifdef Fragment
 79: 
 80: layout(location = 0) in vec4 fs_Colors;
 81: layout(location = 1) in vec4 fs_WorldPosition;
 82: layout(location = 0) out vec4 ColorsOut;
 83: void main()
 84: {
 85:     vec3 n = normalize(fs_WorldPosition.xyz);
 86:     float totalWeight = 0.0;
 87:     vec3 prefilteredColor = vec3(0.0, 0.0, 0.0);
 88:     for(int i = 0; (i < 1025); i++)
 89:     {
 90:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), n, Roughness);
 91:         vec3 l = normalize(((2.0 * dot(n, h)) * h));
 92:         float nDotL = max(0.0, dot(n, l));
 93:         if((nDotL > 0.0))
 94:         {
 95:             prefilteredColor = (prefilteredColor + (texture(envSampler, l).xyz * nDotL));
 96:             totalWeight = (totalWeight + nDotL);
 97:         }
 98:     }
 99:     prefilteredColor = (prefilteredColor / totalWeight);
100:     ColorsOut = vec4(prefilteredColor, fs_Colors.w);
101: }
102: 
103: #endif

 6: [GL] RenderObjects: +1/-0 (39ms)
 6: using optimized native program
 6: WARNING: AdaptiveOutputCubeTexture.compute
 6: texture created
 6: result created
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: layout(std140)
  8: uniform PerModel
  9: {
 10:     mat4x4 ModelTrafo;
 11: };
 12: 
 13: 
 14: layout(std140)
 15: uniform PerView
 16: {
 17:     mat4x4 ViewProjTrafo;
 18: };
 19: 
 20: 
 21: float helper(float roughness)
 22: {
 23:     float r = (roughness + 1.0);
 24:     return ((r * r) / 8.0);
 25: }
 26: 
 27: 
 28: vec3 SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(vec2 xi, vec3 n, float roughness)
 29: {
 30:     float a = (roughness * roughness);
 31:     float phi = (6.283185307179586 * xi.x);
 32:     float cosTheta = sqrt(((1.0 - xi.y) / (1.0 + (((a * a) - 1.0) * xi.y))));
 33:     float sinTheta = sqrt((1.0 - (cosTheta * cosTheta)));
 34:     vec3 h = vec3((cos(phi) * sinTheta), (sin(phi) * sinTheta), cosTheta);
 35:     vec3 tangent = normalize(cross(((abs(n.z) < 0.999) ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0)), n));
 36:     return normalize((((tangent * h.x) + (cross(n, tangent) * h.y)) + (n * h.z)));
 37: }
 38: 
 39: 
 40: float SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(uint bitss)
 41: {
 42:     uint bits = ((bitss << 16) | (bitss >> 16));
 43:     bits = (((bits & uint(1431655765)) << 1) | ((bits & uint(-1431655766)) >> 1));
 44:     bits = (((bits & uint(858993459)) << 2) | ((bits & uint(-858993460)) >> 2));
 45:     bits = (((bits & uint(252645135)) << 4) | ((bits & uint(-252645136)) >> 4));
 46:     bits = (((bits & uint(16711935)) << 8) | ((bits & uint(-16711936)) >> 8));
 47:     return (float(bits) * 2.3283064365386963E-10);
 48: }
 49: 
 50: 
 51: vec2 SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint i, uint n)
 52: {
 53:     return vec2((float(i) / float(n)), SLEAardvarkRenderDemo_PBR_radicalInverseVdC_PTzu00jjKLhEbXthcNGwxKw(i));
 54: }
 55: 
 56: 
 57: float SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(bool ilb, float nDotV, float roughness)
 58: {
 59:     float k = (ilb ? ((roughness * roughness) / 2.0) : helper(roughness));
 60:     return (nDotV / ((nDotV * (1.0 - k)) + k));
 61: }
 62: 
 63: 
 64: float SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(bool ilb, vec3 n, vec3 v, vec3 l, float roughness)
 65: {
 66:     return (SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, l)), roughness) * SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, v)), roughness));
 67: }
 68: 
 69: 
 70: vec2 SLEAardvarkRenderDemo_PBR_integrateBRDF_48I3CDwiqL41Z6uAXSOYfQ(float nDotV, float roughness)
 71: {
 72:     vec3 v = vec3(sqrt((1.0 - (nDotV * nDotV))), 0.0, nDotV);
 73:     float a = 0.0;
 74:     float b = 0.0;
 75:     for(int i = 0; (i < 1025); i++)
 76:     {
 77:         vec3 h = SLEAardvarkRenderDemo_PBR_importanceSampleGGX_4V42kWO755TUaY2LZp5AiA(SLEAardvarkRenderDemo_PBR_hammersley_KHwOjHJZ31Rbp2vEZGL4xg(uint(i), 1024), vec3(0.0, 0.0, 1.0), roughness);
 78:         vec3 l = normalize(((2.0 * dot(v, h)) * h));
 79:         float vDotH = max(0.0, dot(v, h));
 80:         if((max(l.z, 0.0) > 0.0))
 81:         {
 82:             float gVis = ((SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(true, vec3(0.0, 0.0, 1.0), v, l, roughness) * vDotH) / (max(h.z, 0.0) * nDotV));
 83:             float fc = pow((1.0 - vDotH), 5.0);
 84:             a = (a + ((1.0 - fc) * gVis));
 85:             b = (b + (fc * gVis));
 86:         }
 87:     }
 88:     return vec2((a / 1024.0), (b / 1024.0));
 89: }
 90: 
 91: 
 92: 
 93: #ifdef Vertex
 94: 
 95: layout(location = 0) in vec2 DiffuseColorCoordinates;
 96: layout(location = 1) in vec4 Positions;
 97: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
 98: void main()
 99: {
100:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
101:     gl_Position = ((Positions * ModelTrafo) * ViewProjTrafo);
102: }
103: 
104: #endif
105: 
106: 
107: 
108: #ifdef Fragment
109: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
110: layout(location = 0) out vec4 ColorsOut;
111: void main()
112: {
113:     ColorsOut = vec4(vec3(SLEAardvarkRenderDemo_PBR_integrateBRDF_48I3CDwiqL41Z6uAXSOYfQ(fs_DiffuseColorCoordinates.x, fs_DiffuseColorCoordinates.y), 0.0), 1.0);
114: }
115: 
116: #endif

 6: [GL] RenderObjects: +1/-0 (43ms)
 6: using optimized native program
 6: texture created
 6: Compiling shader:
  1: #version 410
  2: #define __SHADER_STAGE__
  3: 
  4: 
  5: 
  6: 
  7: struct tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d
  8: {
  9:     bool Item0;
 10:     vec3 Item1;
 11:     vec3 Item2;
 12: };
 13: 
 14: struct SLEAardvarkRenderDemo_SLEUniform_Light
 15: {
 16:     int lightType;
 17:     vec4 lightPosition;
 18:     vec3 color;
 19:     float attenuationQad;
 20:     float attenuationLinear;
 21:     bool castsShadow;
 22: };
 23: 
 24: layout(std140)
 25: uniform PerView
 26: {
 27:     vec3 CameraLocation;
 28: };
 29: 
 30: 
 31: layout(std140)
 32: uniform Global
 33: {
 34:     SLEAardvarkRenderDemo_SLEUniform_Light Light;
 35:     mat4x4 LightViewMatrix;
 36: };
 37: 
 38: 
 39: uniform sampler2D color;
 40: 
 41: uniform sampler2D materialProperties;
 42: 
 43: uniform sampler2D normal;
 44: 
 45: uniform sampler2DShadow samplerShadowMap;
 46: 
 47: uniform sampler2D wPos;
 48: 
 49: vec3 SLEAardvarkRenderDemo_PBR_fresnelSchlick_p2rPA4e4MFUMqGJ0C14Tng(vec3 f0, float cosTheta)
 50: {
 51:     return (f0 + ((1.0 - f0) * pow((1.0 - cosTheta), 5.0)));
 52: }
 53: 
 54: 
 55: tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(bool item0, vec3 item1, vec3 item2)
 56: {
 57:     tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d res;
 58:     res.Item0 = item0;
 59:     res.Item1 = item1;
 60:     res.Item2 = item2;
 61:     return res;
 62: }
 63: 
 64: 
 65: float SLEAardvarkRenderDemo_PBR_DistributionGGX_9rKdY223uBS_NUz8TxOtw(vec3 n, vec3 h, float roughness)
 66: {
 67:     float a = (roughness * roughness);
 68:     float a2 = (a * a);
 69:     float nDotH = max(0.0, dot(n, h));
 70:     float deno = (((nDotH * nDotH) * (a2 - 1.0)) + 1.0);
 71:     return (a2 / ((3.141592653589793 * deno) * deno));
 72: }
 73: 
 74: 
 75: float helper(float roughness)
 76: {
 77:     float r = (roughness + 1.0);
 78:     return ((r * r) / 8.0);
 79: }
 80: 
 81: 
 82: float SLEAardvarkRenderDemo_PBR_random_JRWM00pdSXu6ly00qNw9NdQg(vec3 seed, int i)
 83: {
 84:     return fract((sin(dot(vec4(seed, float(i)), vec4(12.9898, 78.233, 45.164, 94.673))) * 43758.5453));
 85: }
 86: 
 87: 
 88: float SLEAardvarkRenderDemo_PBR_poissonSamplingStrat_EpA9Eym8CExypNnxV00GUdw(sampler2DShadow shadowMap, vec4 samplePos, vec4 pos, float comp)
 89: {
 90:     vec2 arr[16];
 91:     arr[0] = vec2(-0.94201624, -0.39906216);
 92:     arr[1] = vec2(0.94558609, -0.76890725);
 93:     arr[2] = vec2(-0.094184101, -0.9293887);
 94:     arr[3] = vec2(0.34495938, 0.2938776);
 95:     arr[4] = vec2(-0.91588581, 0.45771432);
 96:     arr[5] = vec2(-0.81544232, -0.87912464);
 97:     arr[6] = vec2(-0.38277543, 0.27676845);
 98:     arr[7] = vec2(0.97484398, 0.75648379);
 99:     arr[8] = vec2(0.44323325, -0.97511554);
100:     arr[9] = vec2(0.53742981, -0.4737342);
101:     arr[10] = vec2(-0.26496911, -0.41893023);
102:     arr[11] = vec2(0.79197514, 0.19090188);
103:     arr[12] = vec2(-0.2418884, 0.99706507);
104:     arr[13] = vec2(-0.81409955, 0.9143759);
105:     arr[14] = vec2(0.19984126, 0.78641367);
106:     arr[15] = vec2(0.14383161, -0.1410079);
107:     float vis = 0.0;
108:     for(int i = 0; (i < 8); i++)
109:     {
110:         vis = (vis + (texture(shadowMap, vec3((samplePos.xy + (arr[(int((16.0 * SLEAardvarkRenderDemo_PBR_random_JRWM00pdSXu6ly00qNw9NdQg(pos.xyz, i))) % 16)] / 600.0)), comp)) / 8.0));
111:     }
112:     return vis;
113: }
114: 
115: 
116: float SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(bool ilb, float nDotV, float roughness)
117: {
118:     float k = (ilb ? ((roughness * roughness) / 2.0) : helper(roughness));
119:     return (nDotV / ((nDotV * (1.0 - k)) + k));
120: }
121: 
122: 
123: float SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(bool ilb, vec3 n, vec3 v, vec3 l, float roughness)
124: {
125:     return (SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, l)), roughness) * SLEAardvarkRenderDemo_PBR_GeometrySchlickGGX_26R00oEc3DtK0V8hk2HayMQ(ilb, max(0.0, dot(n, v)), roughness));
126: }
127: 
128: 
129: tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d SLEAardvarkRenderDemo_PBR_getLightParams_kyLcjVsSKKfWCNmsxKXq1A(SLEAardvarkRenderDemo_SLEUniform_Light light, vec3 wPos)
130: {
131:     if((light.lightType == 0))
132:     {
133:         return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
134:     }
135:     else
136:     {
137:         if((light.lightType == 1))
138:         {
139:             return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(true, normalize((-light.lightPosition.xyz)), light.color);
140:         }
141:         else
142:         {
143:             if((light.lightType == 2))
144:             {
145:                 float dist = distance(light.lightPosition.xyz, wPos);
146:                 return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(true, normalize((light.lightPosition.xyz - wPos)), (light.color * (1.0 / ((1.0 + (light.attenuationLinear * dist)) + ((light.attenuationQad * dist) * dist)))));
147:             }
148:             else
149:             {
150:                 return new_tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));
151:             }
152:         }
153:     }
154: }
155: 
156: 
157: vec3 SLEAardvarkRenderDemo_PBR_pbrDirect_sus2XA3pL9i43DpwtvodNA(vec3 f0, float roughness, float metallic, vec3 albedo, vec4 wPos, vec3 v, vec3 n, float nDotV, SLEAardvarkRenderDemo_SLEUniform_Light light)
158: {
159:     tup_bool_Aardvark_Base_V3d_Aardvark_Base_V3d patternInput = SLEAardvarkRenderDemo_PBR_getLightParams_kyLcjVsSKKfWCNmsxKXq1A(light, wPos.xyz);
160:     if(patternInput.Item0)
161:     {
162:         vec3 h = normalize((v + patternInput.Item1));
163:         vec3 kS = SLEAardvarkRenderDemo_PBR_fresnelSchlick_p2rPA4e4MFUMqGJ0C14Tng(f0, max(0.0, dot(h, v)));
164:         float nDotL = max(0.0, dot(n, patternInput.Item1));
165:         return (((((((1.0 - metallic) * (vec3(1.0, 1.0, 1.0) - kS)) * albedo) / 3.141592653589793) + (((SLEAardvarkRenderDemo_PBR_DistributionGGX_9rKdY223uBS_NUz8TxOtw(n, h, roughness) * SLEAardvarkRenderDemo_PBR_GeometrySmith_xfYfQPU4ULd82cnkEA80yw(false, n, v, patternInput.Item1, roughness)) * kS) / max(0.001, ((4.0 * nDotV) * nDotL)))) * patternInput.Item2) * nDotL);
166:     }
167:     else
168:     {
169:         return vec3(0.0, 0.0, 0.0);
170:     }
171: }
172: 
173: 
174: 
175: #ifdef Vertex
176: layout(location = 0) in vec2 DiffuseColorCoordinates;
177: layout(location = 1) in vec4 Positions;
178: layout(location = 0) out vec2 fs_DiffuseColorCoordinates;
179: void main()
180: {
181:     fs_DiffuseColorCoordinates = DiffuseColorCoordinates;
182:     gl_Position = Positions;
183: }
184: 
185: #endif
186: 
187: 
188: 
189: #ifdef Fragment
190: 
191: float SLEAardvarkRenderDemo_PBR_getShadow_GZc3cHBNmbi_Jz2ffBsesQ(vec4 wPos)
192: {
193:     vec4 lightSpacePos = (wPos * LightViewMatrix);
194:     vec4 samplePos = (0.5 + (0.5 * (lightSpacePos / lightSpacePos.w)));
195:     return SLEAardvarkRenderDemo_PBR_poissonSamplingStrat_EpA9Eym8CExypNnxV00GUdw(samplerShadowMap, samplePos, wPos, (samplePos.z - 0.005));
196: }
197: 
198: vec3 SLEAardvarkRenderDemo_PBR_pBRLightning_2wyHfJ4HvFqeUQ4k4HppZA(float metallic, float roughness, vec3 albedo, vec3 n, vec4 wPos)
199: {
200:     vec3 v = normalize((CameraLocation - wPos.xyz));
201:     return SLEAardvarkRenderDemo_PBR_pbrDirect_sus2XA3pL9i43DpwtvodNA(mix(vec3(0.04, 0.04, 0.04), albedo, metallic), roughness, metallic, albedo, wPos, v, n, max(0.0, dot(n, v)), Light);
202: }
203: 
204: layout(location = 0) in vec2 fs_DiffuseColorCoordinates;
205: layout(location = 0) out vec4 ColorsOut;
206: void main()
207: {
208:     vec2 m = texture(materialProperties, fs_DiffuseColorCoordinates).xy;
209:     ColorsOut = (vec4(((m.x < 0.0) ? vec3(0.0, 0.0, 0.0) : SLEAardvarkRenderDemo_PBR_pBRLightning_2wyHfJ4HvFqeUQ4k4HppZA(m.x, m.y, texture(color, fs_DiffuseColorCoordinates).xyz, normalize(texture(normal, fs_DiffuseColorCoordinates).xyz), texture(wPos, fs_DiffuseColorCoordinates))), 1.0) * SLEAardvarkRenderDemo_PBR_getShadow_GZc3cHBNmbi_Jz2ffBsesQ(texture(wPos, fs_DiffuseColorCoordinates)));
210: }
211: 
212: #endif

 6: WARNING: load
